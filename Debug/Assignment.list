
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004850  08004850  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004850  08004850  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004850  08004850  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000098  080048f0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080048f0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164c0  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ced  00000000  00000000  00036581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00039fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019be9  00000000  00000000  0003abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113bb  00000000  00000000  00054799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2da  00000000  00000000  00065b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000f0e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080047c4 	.word	0x080047c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080047c4 	.word	0x080047c4

0800014c <button_reading>:
static GPIO_PinState Reg1[NO_OF_BUTTONS];
static GPIO_PinState Reg2[NO_OF_BUTTONS];
/* Set time out */
int TimerForKeyPress = 300;
/* Read input then set button flag */
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a6      	b.n	80002a6 <button_reading+0x15a>
		Reg2[i] = Reg1[i];
 8000158:	4a57      	ldr	r2, [pc, #348]	; (80002b8 <button_reading+0x16c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a56      	ldr	r2, [pc, #344]	; (80002bc <button_reading+0x170>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		Reg1[i] = Reg0[i];
 800016a:	4a55      	ldr	r2, [pc, #340]	; (80002c0 <button_reading+0x174>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a51      	ldr	r2, [pc, #324]	; (80002b8 <button_reading+0x16c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 800017c:	4a51      	ldr	r2, [pc, #324]	; (80002c4 <button_reading+0x178>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	4619      	mov	r1, r3
 8000186:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000188:	f001 fe30 	bl	8001dec <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a4b      	ldr	r2, [pc, #300]	; (80002c0 <button_reading+0x174>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
		if(i <= 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	dc0f      	bgt.n	80001c0 <button_reading+0x74>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <button_reading+0x178>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4847      	ldr	r0, [pc, #284]	; (80002c8 <button_reading+0x17c>)
 80001ac:	f001 fe1e 	bl	8001dec <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a42      	ldr	r2, [pc, #264]	; (80002c0 <button_reading+0x174>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e021      	b.n	8000204 <button_reading+0xb8>
		}
		else if(i == 2){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10f      	bne.n	80001e6 <button_reading+0x9a>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOB, INPUT_BUTTON[i]);
 80001c6:	4a3f      	ldr	r2, [pc, #252]	; (80002c4 <button_reading+0x178>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ce:	4619      	mov	r1, r3
 80001d0:	483e      	ldr	r0, [pc, #248]	; (80002cc <button_reading+0x180>)
 80001d2:	f001 fe0b 	bl	8001dec <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <button_reading+0x174>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00e      	b.n	8000204 <button_reading+0xb8>
		}
		else{
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <button_reading+0x178>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <button_reading+0x17c>)
 80001f2:	f001 fdfb 	bl	8001dec <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <button_reading+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
		}
		/* Check stable state */
		if((Reg0[i] == Reg1[i]) && (Reg1[i] == Reg2[i])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <button_reading+0x174>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	440b      	add	r3, r1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <button_reading+0x154>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <button_reading+0x170>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	440b      	add	r3, r1
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <button_reading+0x154>
			if(Reg3[i] != Reg2[i]){
 800022c:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <button_reading+0x184>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4921      	ldr	r1, [pc, #132]	; (80002bc <button_reading+0x170>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	440b      	add	r3, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <button_reading+0x126>
				Reg3[i] = Reg2[i];
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <button_reading+0x170>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <button_reading+0x184>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
				if(Reg2[i] == PRESSED){
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <button_reading+0x170>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <button_reading+0x154>
					/* Button is pressed set flag */
					buttonPressed_flag[i] = 1;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <button_reading+0x188>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
					TimerForKeyPress = 300;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <button_reading+0x18c>)
 800026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e016      	b.n	80002a0 <button_reading+0x154>
				}
			}
			else{
				/* Long-press handle*/
				if(Reg2[i] == PRESSED){
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d110      	bne.n	80002a0 <button_reading+0x154>
					TimerForKeyPress--;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <button_reading+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_reading+0x18c>)
 8000286:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <button_reading+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d107      	bne.n	80002a0 <button_reading+0x154>
						buttonPressed_flag[i] = 1;
 8000290:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <button_reading+0x188>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
						TimerForKeyPress = 100;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f77f af55 	ble.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000bc 	.word	0x200000bc
 80002bc:	200000c0 	.word	0x200000c0
 80002c0:	200000b8 	.word	0x200000b8
 80002c4:	20000004 	.word	0x20000004
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	200000b4 	.word	0x200000b4
 80002d4:	200000c8 	.word	0x200000c8
 80002d8:	20000000 	.word	0x20000000

080002dc <FSM_Buzzer>:
 *      Author: Minh Duc Quach
 */

#include "buzzer.h"

void FSM_Buzzer(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* If Pedestrian button is pressed and the pedestrian is allowed to cross the road */
	if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row == AUTO_RED){
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <FSM_Buzzer+0x7c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d130      	bne.n	800034a <FSM_Buzzer+0x6e>
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <FSM_Buzzer+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d12c      	bne.n	800034a <FSM_Buzzer+0x6e>
		switch (FSM_Buzzer_State){
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <FSM_Buzzer+0x84>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d011      	beq.n	800031c <FSM_Buzzer+0x40>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d120      	bne.n	800033e <FSM_Buzzer+0x62>
		case ON:
			/* Turn on Buzzer */
			if(timer4Flag == 1){
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <FSM_Buzzer+0x88>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d11e      	bne.n	8000342 <FSM_Buzzer+0x66>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 999);					// set buzzer volume
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <FSM_Buzzer+0x8c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
				FSM_Buzzer_State = OFF;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <FSM_Buzzer+0x84>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
				/* The buzzer is ON for DURATION_ON_TIME * TICK ms */
				setTimer4(DURATION_ON_TIME * TICK);
 8000314:	200a      	movs	r0, #10
 8000316:	f001 f8cf 	bl	80014b8 <setTimer4>
			}
			break;
 800031a:	e012      	b.n	8000342 <FSM_Buzzer+0x66>
		case OFF:
			if(timer4Flag == 1){
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <FSM_Buzzer+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d110      	bne.n	8000346 <FSM_Buzzer+0x6a>
				FSM_Buzzer_State = ON;
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <FSM_Buzzer+0x84>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);					// turn off buzzer
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <FSM_Buzzer+0x8c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2200      	movs	r2, #0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer4(traffic_light_remain_time_row);							// set buzzer frequency based on time left
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <FSM_Buzzer+0x90>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f8be 	bl	80014b8 <setTimer4>
			}
			break;
 800033c:	e003      	b.n	8000346 <FSM_Buzzer+0x6a>
		default:
			break;
 800033e:	bf00      	nop
 8000340:	e008      	b.n	8000354 <FSM_Buzzer+0x78>
			break;
 8000342:	bf00      	nop
 8000344:	e006      	b.n	8000354 <FSM_Buzzer+0x78>
			break;
 8000346:	bf00      	nop
		switch (FSM_Buzzer_State){
 8000348:	e004      	b.n	8000354 <FSM_Buzzer+0x78>
		}

	}
	/* Other cases */
	else{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <FSM_Buzzer+0x8c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000d0 	.word	0x200000d0
 800035c:	200000cc 	.word	0x200000cc
 8000360:	200000d4 	.word	0x200000d4
 8000364:	200000f4 	.word	0x200000f4
 8000368:	2000010c 	.word	0x2000010c
 800036c:	2000001c 	.word	0x2000001c

08000370 <display_traffic_light>:
 *      Author: LENOVO
 */

#include "display_traffic_light.h"

void display_traffic_light(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row){
 8000374:	4b84      	ldr	r3, [pc, #528]	; (8000588 <display_traffic_light+0x218>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b09      	cmp	r3, #9
 800037a:	f200 80a1 	bhi.w	80004c0 <display_traffic_light+0x150>
 800037e:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <display_traffic_light+0x14>)
 8000380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000384:	080003ad 	.word	0x080003ad
 8000388:	08000409 	.word	0x08000409
 800038c:	08000465 	.word	0x08000465
 8000390:	080003c5 	.word	0x080003c5
 8000394:	08000421 	.word	0x08000421
 8000398:	0800047d 	.word	0x0800047d
 800039c:	080004c1 	.word	0x080004c1
 80003a0:	080003dd 	.word	0x080003dd
 80003a4:	08000439 	.word	0x08000439
 80003a8:	08000495 	.word	0x08000495
	case AUTO_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	4876      	ldr	r0, [pc, #472]	; (800058c <display_traffic_light+0x21c>)
 80003b4:	f001 fd31 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2108      	movs	r1, #8
 80003bc:	4874      	ldr	r0, [pc, #464]	; (8000590 <display_traffic_light+0x220>)
 80003be:	f001 fd2c 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 80003c2:	e088      	b.n	80004d6 <display_traffic_light+0x166>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ca:	4870      	ldr	r0, [pc, #448]	; (800058c <display_traffic_light+0x21c>)
 80003cc:	f001 fd25 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2108      	movs	r1, #8
 80003d4:	486e      	ldr	r0, [pc, #440]	; (8000590 <display_traffic_light+0x220>)
 80003d6:	f001 fd20 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 80003da:	e07c      	b.n	80004d6 <display_traffic_light+0x166>
	case SET_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	486a      	ldr	r0, [pc, #424]	; (800058c <display_traffic_light+0x21c>)
 80003e4:	f001 fd19 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2108      	movs	r1, #8
 80003ec:	4868      	ldr	r0, [pc, #416]	; (8000590 <display_traffic_light+0x220>)
 80003ee:	f001 fd14 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2120      	movs	r1, #32
 80003f6:	4866      	ldr	r0, [pc, #408]	; (8000590 <display_traffic_light+0x220>)
 80003f8:	f001 fd0f 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2110      	movs	r1, #16
 8000400:	4863      	ldr	r0, [pc, #396]	; (8000590 <display_traffic_light+0x220>)
 8000402:	f001 fd0a 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000406:	e066      	b.n	80004d6 <display_traffic_light+0x166>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040e:	485f      	ldr	r0, [pc, #380]	; (800058c <display_traffic_light+0x21c>)
 8000410:	f001 fd03 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2108      	movs	r1, #8
 8000418:	485d      	ldr	r0, [pc, #372]	; (8000590 <display_traffic_light+0x220>)
 800041a:	f001 fcfe 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 800041e:	e05a      	b.n	80004d6 <display_traffic_light+0x166>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000426:	4859      	ldr	r0, [pc, #356]	; (800058c <display_traffic_light+0x21c>)
 8000428:	f001 fcf7 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2108      	movs	r1, #8
 8000430:	4857      	ldr	r0, [pc, #348]	; (8000590 <display_traffic_light+0x220>)
 8000432:	f001 fcf2 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000436:	e04e      	b.n	80004d6 <display_traffic_light+0x166>
	case SET_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043e:	4853      	ldr	r0, [pc, #332]	; (800058c <display_traffic_light+0x21c>)
 8000440:	f001 fceb 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2108      	movs	r1, #8
 8000448:	4851      	ldr	r0, [pc, #324]	; (8000590 <display_traffic_light+0x220>)
 800044a:	f001 fce6 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	484f      	ldr	r0, [pc, #316]	; (8000590 <display_traffic_light+0x220>)
 8000454:	f001 fce1 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2110      	movs	r1, #16
 800045c:	484c      	ldr	r0, [pc, #304]	; (8000590 <display_traffic_light+0x220>)
 800045e:	f001 fcdc 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000462:	e038      	b.n	80004d6 <display_traffic_light+0x166>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000464:	2201      	movs	r2, #1
 8000466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046a:	4848      	ldr	r0, [pc, #288]	; (800058c <display_traffic_light+0x21c>)
 800046c:	f001 fcd5 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2108      	movs	r1, #8
 8000474:	4846      	ldr	r0, [pc, #280]	; (8000590 <display_traffic_light+0x220>)
 8000476:	f001 fcd0 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 800047a:	e02c      	b.n	80004d6 <display_traffic_light+0x166>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	4842      	ldr	r0, [pc, #264]	; (800058c <display_traffic_light+0x21c>)
 8000484:	f001 fcc9 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2108      	movs	r1, #8
 800048c:	4840      	ldr	r0, [pc, #256]	; (8000590 <display_traffic_light+0x220>)
 800048e:	f001 fcc4 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000492:	e020      	b.n	80004d6 <display_traffic_light+0x166>
	case SET_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	483c      	ldr	r0, [pc, #240]	; (800058c <display_traffic_light+0x21c>)
 800049c:	f001 fcbd 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2108      	movs	r1, #8
 80004a4:	483a      	ldr	r0, [pc, #232]	; (8000590 <display_traffic_light+0x220>)
 80004a6:	f001 fcb8 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2120      	movs	r1, #32
 80004ae:	4838      	ldr	r0, [pc, #224]	; (8000590 <display_traffic_light+0x220>)
 80004b0:	f001 fcb3 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	4835      	ldr	r0, [pc, #212]	; (8000590 <display_traffic_light+0x220>)
 80004ba:	f001 fcae 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 80004be:	e00a      	b.n	80004d6 <display_traffic_light+0x166>
	default:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	4831      	ldr	r0, [pc, #196]	; (800058c <display_traffic_light+0x21c>)
 80004c8:	f001 fca7 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	482f      	ldr	r0, [pc, #188]	; (8000590 <display_traffic_light+0x220>)
 80004d2:	f001 fca2 	bl	8001e1a <HAL_GPIO_WritePin>
	}
	switch (FSM_Traffic_Light_State_Col){
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <display_traffic_light+0x224>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d850      	bhi.n	8000580 <display_traffic_light+0x210>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <display_traffic_light+0x174>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	080004fd 	.word	0x080004fd
 80004e8:	08000529 	.word	0x08000529
 80004ec:	08000555 	.word	0x08000555
 80004f0:	08000513 	.word	0x08000513
 80004f4:	0800053f 	.word	0x0800053f
 80004f8:	0800056b 	.word	0x0800056b
	case AUTO_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	4823      	ldr	r0, [pc, #140]	; (8000590 <display_traffic_light+0x220>)
 8000502:	f001 fc8a 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	4821      	ldr	r0, [pc, #132]	; (8000590 <display_traffic_light+0x220>)
 800050c:	f001 fc85 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000510:	e037      	b.n	8000582 <display_traffic_light+0x212>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2120      	movs	r1, #32
 8000516:	481e      	ldr	r0, [pc, #120]	; (8000590 <display_traffic_light+0x220>)
 8000518:	f001 fc7f 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2110      	movs	r1, #16
 8000520:	481b      	ldr	r0, [pc, #108]	; (8000590 <display_traffic_light+0x220>)
 8000522:	f001 fc7a 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000526:	e02c      	b.n	8000582 <display_traffic_light+0x212>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	4818      	ldr	r0, [pc, #96]	; (8000590 <display_traffic_light+0x220>)
 800052e:	f001 fc74 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2110      	movs	r1, #16
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <display_traffic_light+0x220>)
 8000538:	f001 fc6f 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 800053c:	e021      	b.n	8000582 <display_traffic_light+0x212>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	4813      	ldr	r0, [pc, #76]	; (8000590 <display_traffic_light+0x220>)
 8000544:	f001 fc69 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <display_traffic_light+0x220>)
 800054e:	f001 fc64 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000552:	e016      	b.n	8000582 <display_traffic_light+0x212>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2120      	movs	r1, #32
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <display_traffic_light+0x220>)
 800055a:	f001 fc5e 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <display_traffic_light+0x220>)
 8000564:	f001 fc59 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 8000568:	e00b      	b.n	8000582 <display_traffic_light+0x212>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <display_traffic_light+0x220>)
 8000570:	f001 fc53 	bl	8001e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <display_traffic_light+0x220>)
 800057a:	f001 fc4e 	bl	8001e1a <HAL_GPIO_WritePin>
		break;
 800057e:	e000      	b.n	8000582 <display_traffic_light+0x212>
	default:
		break;
 8000580:	bf00      	nop
	}
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000cc 	.word	0x200000cc
 800058c:	40010800 	.word	0x40010800
 8000590:	40010c00 	.word	0x40010c00
 8000594:	2000000c 	.word	0x2000000c

08000598 <FSM_Pedestrian>:
 *      Author: duchu
 */

#include "fsm_pedestrian.h"

void FSM_Pedestrian(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    switch(FSM_Pedestrian_State){
 800059c:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <FSM_Pedestrian+0x11c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <FSM_Pedestrian+0x12>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d023      	beq.n	80005f0 <FSM_Pedestrian+0x58>
        default:
            break;
        }
        break;
    default:
        break;
 80005a8:	e081      	b.n	80006ae <FSM_Pedestrian+0x116>
        HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	4841      	ldr	r0, [pc, #260]	; (80006b8 <FSM_Pedestrian+0x120>)
 80005b2:	f001 fc32 	bl	8001e1a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	483f      	ldr	r0, [pc, #252]	; (80006bc <FSM_Pedestrian+0x124>)
 80005be:	f001 fc2c 	bl	8001e1a <HAL_GPIO_WritePin>
        if(buttonPressed_flag[3]){
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <FSM_Pedestrian+0x128>)
 80005c4:	78db      	ldrb	r3, [r3, #3]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d070      	beq.n	80006ac <FSM_Pedestrian+0x114>
            buttonPressed_flag[3] = 0;
 80005ca:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <FSM_Pedestrian+0x128>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	70da      	strb	r2, [r3, #3]
            FSM_Pedestrian_State = WORK;
 80005d0:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <FSM_Pedestrian+0x11c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
            FSM_Buzzer_State = ON;
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <FSM_Pedestrian+0x12c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
            setTimer4(1*TICK);									// buzzer timer
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 ff6b 	bl	80014b8 <setTimer4>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);		// pedestrian mode timer, set to 2 cycles of RED + YELLOW + GREEN
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <FSM_Pedestrian+0x130>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ff51 	bl	8001490 <setTimer3>
        break;
 80005ee:	e05d      	b.n	80006ac <FSM_Pedestrian+0x114>
        if(timer3Flag == 1 || FSM_Traffic_Light_State_Row == SET_GREEN
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <FSM_Pedestrian+0x134>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d017      	beq.n	8000628 <FSM_Pedestrian+0x90>
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <FSM_Pedestrian+0x138>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d013      	beq.n	8000628 <FSM_Pedestrian+0x90>
        	|| FSM_Traffic_Light_State_Row == SET_RED || FSM_Traffic_Light_State_Row == SET_YEL
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <FSM_Pedestrian+0x138>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b07      	cmp	r3, #7
 8000606:	d00f      	beq.n	8000628 <FSM_Pedestrian+0x90>
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <FSM_Pedestrian+0x138>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d00b      	beq.n	8000628 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_RED || FSM_Traffic_Light_State_Row == MANUAL_YEL
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <FSM_Pedestrian+0x138>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d007      	beq.n	8000628 <FSM_Pedestrian+0x90>
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <FSM_Pedestrian+0x138>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d003      	beq.n	8000628 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_GREEN){	// 2 cycles passed without pressing the button or MODE changed to SET or MANUAL
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <FSM_Pedestrian+0x138>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d103      	bne.n	8000630 <FSM_Pedestrian+0x98>
            FSM_Pedestrian_State = IDLE;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <FSM_Pedestrian+0x11c>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
            break;
 800062e:	e03e      	b.n	80006ae <FSM_Pedestrian+0x116>
        if(buttonPressed_flag[3]){	// the button is pressed before timeout
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <FSM_Pedestrian+0x128>)
 8000632:	78db      	ldrb	r3, [r3, #3]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <FSM_Pedestrian+0xac>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <FSM_Pedestrian+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ff26 	bl	8001490 <setTimer3>
        switch (FSM_Traffic_Light_State_Col){
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <FSM_Pedestrian+0x13c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d020      	beq.n	800068e <FSM_Pedestrian+0xf6>
 800064c:	2b02      	cmp	r3, #2
 800064e:	dc2b      	bgt.n	80006a8 <FSM_Pedestrian+0x110>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <FSM_Pedestrian+0xc2>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00d      	beq.n	8000674 <FSM_Pedestrian+0xdc>
            break;
 8000658:	e026      	b.n	80006a8 <FSM_Pedestrian+0x110>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4815      	ldr	r0, [pc, #84]	; (80006b8 <FSM_Pedestrian+0x120>)
 8000662:	f001 fbda 	bl	8001e1a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <FSM_Pedestrian+0x124>)
 800066e:	f001 fbd4 	bl	8001e1a <HAL_GPIO_WritePin>
            break;
 8000672:	e01a      	b.n	80006aa <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <FSM_Pedestrian+0x120>)
 800067c:	f001 fbcd 	bl	8001e1a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <FSM_Pedestrian+0x124>)
 8000688:	f001 fbc7 	bl	8001e1a <HAL_GPIO_WritePin>
            break;
 800068c:	e00d      	b.n	80006aa <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <FSM_Pedestrian+0x120>)
 8000696:	f001 fbc0 	bl	8001e1a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <FSM_Pedestrian+0x124>)
 80006a2:	f001 fbba 	bl	8001e1a <HAL_GPIO_WritePin>
            break;
 80006a6:	e000      	b.n	80006aa <FSM_Pedestrian+0x112>
            break;
 80006a8:	bf00      	nop
        break;
 80006aa:	e000      	b.n	80006ae <FSM_Pedestrian+0x116>
        break;
 80006ac:	bf00      	nop
    }
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	40010800 	.word	0x40010800
 80006c0:	200000c8 	.word	0x200000c8
 80006c4:	200000d4 	.word	0x200000d4
 80006c8:	20000024 	.word	0x20000024
 80006cc:	200000ec 	.word	0x200000ec
 80006d0:	200000cc 	.word	0x200000cc
 80006d4:	2000000c 	.word	0x2000000c

080006d8 <resetAllButtonState>:

#include "fsm_traffic_light.h"

int To_Default_State = 0;		// used to set COL traffic state

void resetAllButtonState(){		// reset buttons
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	e007      	b.n	80006f4 <resetAllButtonState+0x1c>
		buttonPressed_flag[i] = 0;
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <resetAllButtonState+0x30>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	ddf4      	ble.n	80006e4 <resetAllButtonState+0xc>
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000c8 	.word	0x200000c8

0800070c <changeTime>:

void changeTime(){				// change traffic time
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	Set_TL_Time++;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <changeTime+0x24>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <changeTime+0x24>)
 8000718:	6013      	str	r3, [r2, #0]
	if(Set_TL_Time >= 100){		// 1 <= time <= 99
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <changeTime+0x24>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b63      	cmp	r3, #99	; 0x63
 8000720:	dd02      	ble.n	8000728 <changeTime+0x1c>
		Set_TL_Time = 1;
 8000722:	4b03      	ldr	r3, [pc, #12]	; (8000730 <changeTime+0x24>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
	}
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	200000f8 	.word	0x200000f8

08000734 <FSM_Traffic_Light_Row>:

void FSM_Traffic_Light_Row(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row) {
 8000738:	4ba6      	ldr	r3, [pc, #664]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b09      	cmp	r3, #9
 800073e:	f200 8289 	bhi.w	8000c54 <FSM_Traffic_Light_Row+0x520>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <FSM_Traffic_Light_Row+0x14>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000771 	.word	0x08000771
 800074c:	080007f7 	.word	0x080007f7
 8000750:	0800087d 	.word	0x0800087d
 8000754:	08000b39 	.word	0x08000b39
 8000758:	08000b99 	.word	0x08000b99
 800075c:	08000bf7 	.word	0x08000bf7
 8000760:	08000c55 	.word	0x08000c55
 8000764:	08000903 	.word	0x08000903
 8000768:	080009ad 	.word	0x080009ad
 800076c:	08000a83 	.word	0x08000a83
	/* AUTO MODE */
	case AUTO_RED:
		if(timer1Flag == 1){
 8000770:	4b99      	ldr	r3, [pc, #612]	; (80009d8 <FSM_Traffic_Light_Row+0x2a4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d114      	bne.n	80007a2 <FSM_Traffic_Light_Row+0x6e>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a97      	ldr	r2, [pc, #604]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000780:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000782:	4b96      	ldr	r3, [pc, #600]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d106      	bne.n	8000798 <FSM_Traffic_Light_Row+0x64>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_GREEN;
 800078a:	4b92      	ldr	r3, [pc, #584]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = green_time;
 8000790:	4b93      	ldr	r3, [pc, #588]	; (80009e0 <FSM_Traffic_Light_Row+0x2ac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a91      	ldr	r2, [pc, #580]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000796:	6013      	str	r3, [r2, #0]
			}

			uart_transmit();
 8000798:	f000 fef8 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 800079c:	2064      	movs	r0, #100	; 0x64
 800079e:	f000 fe4f 	bl	8001440 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 80007a2:	4b90      	ldr	r3, [pc, #576]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d014      	beq.n	80007d4 <FSM_Traffic_Light_Row+0xa0>
			buttonPressed_flag[0] = 0;
 80007aa:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80007b0:	4b8d      	ldr	r3, [pc, #564]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a8d      	ldr	r2, [pc, #564]	; (80009ec <FSM_Traffic_Light_Row+0x2b8>)
 80007b6:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 80007b8:	4b86      	ldr	r3, [pc, #536]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 80007c0:	2206      	movs	r2, #6
 80007c2:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80007c4:	f000 fee2 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 fe38 	bl	8001440 <setTimer1>
			resetAllButtonState();
 80007d0:	f7ff ff82 	bl	80006d8 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 80007d4:	4b83      	ldr	r3, [pc, #524]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 823d 	beq.w	8000c58 <FSM_Traffic_Light_Row+0x524>
			buttonPressed_flag[1] = 0;
 80007de:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80007e4:	4b7b      	ldr	r3, [pc, #492]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 80007ea:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 80007f0:	f7ff ff72 	bl	80006d8 <resetAllButtonState>
		}
		break;
 80007f4:	e230      	b.n	8000c58 <FSM_Traffic_Light_Row+0x524>
	case AUTO_GREEN:
		if(timer1Flag == 1){
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <FSM_Traffic_Light_Row+0x2a4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d114      	bne.n	8000828 <FSM_Traffic_Light_Row+0xf4>
			/* Count down time */
			traffic_light_remain_time_row--;
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3b01      	subs	r3, #1
 8000804:	4a75      	ldr	r2, [pc, #468]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000806:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000808:	4b74      	ldr	r3, [pc, #464]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <FSM_Traffic_Light_Row+0xea>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_YEL;
 8000810:	4b70      	ldr	r3, [pc, #448]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 8000812:	2202      	movs	r2, #2
 8000814:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = yellow_time;
 8000816:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <FSM_Traffic_Light_Row+0x2c0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a70      	ldr	r2, [pc, #448]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 800081c:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 800081e:	f000 feb5 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f000 fe0c 	bl	8001440 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 8000828:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d014      	beq.n	800085a <FSM_Traffic_Light_Row+0x126>
			buttonPressed_flag[0] = 0;
 8000830:	4b6c      	ldr	r3, [pc, #432]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000836:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a6c      	ldr	r2, [pc, #432]	; (80009ec <FSM_Traffic_Light_Row+0x2b8>)
 800083c:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 800083e:	4b65      	ldr	r3, [pc, #404]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000844:	4b6a      	ldr	r3, [pc, #424]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 8000846:	2206      	movs	r2, #6
 8000848:	601a      	str	r2, [r3, #0]
			uart_transmit();
 800084a:	f000 fe9f 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f000 fdf5 	bl	8001440 <setTimer1>
			resetAllButtonState();
 8000856:	f7ff ff3f 	bl	80006d8 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 81fc 	beq.w	8000c5c <FSM_Traffic_Light_Row+0x528>
			buttonPressed_flag[1] = 0;
 8000864:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 8000866:	2200      	movs	r2, #0
 8000868:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 800086a:	4b5a      	ldr	r3, [pc, #360]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 800086c:	2203      	movs	r2, #3
 800086e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000870:	4b5f      	ldr	r3, [pc, #380]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 8000872:	2204      	movs	r2, #4
 8000874:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000876:	f7ff ff2f 	bl	80006d8 <resetAllButtonState>
		}
		break;
 800087a:	e1ef      	b.n	8000c5c <FSM_Traffic_Light_Row+0x528>
	case AUTO_YEL:
		if(timer1Flag == 1){
 800087c:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <FSM_Traffic_Light_Row+0x2a4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d114      	bne.n	80008ae <FSM_Traffic_Light_Row+0x17a>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000884:	4b55      	ldr	r3, [pc, #340]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	4a54      	ldr	r2, [pc, #336]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 800088c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 800088e:	4b53      	ldr	r3, [pc, #332]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <FSM_Traffic_Light_Row+0x170>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_RED;
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = red_time;
 800089c:	4b52      	ldr	r3, [pc, #328]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a4e      	ldr	r2, [pc, #312]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 80008a2:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 80008a4:	f000 fe72 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80008a8:	2064      	movs	r0, #100	; 0x64
 80008aa:	f000 fdc9 	bl	8001440 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 80008ae:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d014      	beq.n	80008e0 <FSM_Traffic_Light_Row+0x1ac>
			buttonPressed_flag[0] = 0;
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80008bc:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <FSM_Traffic_Light_Row+0x2b8>)
 80008c2:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80008d0:	f000 fe5c 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80008d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d8:	f000 fdb2 	bl	8001440 <setTimer1>
			resetAllButtonState();
 80008dc:	f7ff fefc 	bl	80006d8 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 80008e0:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f000 81bb 	beq.w	8000c60 <FSM_Traffic_Light_Row+0x52c>
			buttonPressed_flag[1] = 0;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 80008f2:	2203      	movs	r2, #3
 80008f4:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <FSM_Traffic_Light_Row+0x2bc>)
 80008f8:	2204      	movs	r2, #4
 80008fa:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 80008fc:	f7ff feec 	bl	80006d8 <resetAllButtonState>
		}
		break;
 8000900:	e1ae      	b.n	8000c60 <FSM_Traffic_Light_Row+0x52c>

	/* SET MODE */
	case SET_RED:
		if(timer1Flag == 1){
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <FSM_Traffic_Light_Row+0x2a4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10f      	bne.n	800092a <FSM_Traffic_Light_Row+0x1f6>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a31      	ldr	r2, [pc, #196]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 8000916:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <FSM_Traffic_Light_Row+0x2c4>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
			uart_transmit();
 800091e:	f000 fe35 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f000 fd8c 	bl	8001440 <setTimer1>
			break;
 8000928:	e1a7      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00f      	beq.n	8000952 <FSM_Traffic_Light_Row+0x21e>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = green_time;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <FSM_Traffic_Light_Row+0x2ac>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <FSM_Traffic_Light_Row+0x2b8>)
 800093e:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_GREEN;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 8000942:	2208      	movs	r2, #8
 8000944:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000946:	f000 fe21 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800094a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094e:	f000 fd77 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00a      	beq.n	8000970 <FSM_Traffic_Light_Row+0x23c>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 800095c:	2200      	movs	r2, #0
 800095e:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000960:	f7ff fed4 	bl	800070c <changeTime>
			uart_transmit();
 8000964:	f000 fe12 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f000 fd68 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 8175 	beq.w	8000c64 <FSM_Traffic_Light_Row+0x530>
			/* Save value */
			buttonPressed_flag[2] = 0;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <FSM_Traffic_Light_Row+0x2b0>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
			red_time = Set_TL_Time;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <FSM_Traffic_Light_Row+0x2b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 8000986:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <FSM_Traffic_Light_Row+0x2c0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	441a      	add	r2, r3
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <FSM_Traffic_Light_Row+0x2ac>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	2264      	movs	r2, #100	; 0x64
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <FSM_Traffic_Light_Row+0x2c8>)
 80009a0:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a6:	f000 fd4b 	bl	8001440 <setTimer1>
		}
		break;
 80009aa:	e15b      	b.n	8000c64 <FSM_Traffic_Light_Row+0x530>
	case SET_GREEN:
		if(timer1Flag == 1){
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <FSM_Traffic_Light_Row+0x2a4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d125      	bne.n	8000a00 <FSM_Traffic_Light_Row+0x2cc>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <FSM_Traffic_Light_Row+0x2a0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <FSM_Traffic_Light_Row+0x2c4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <FSM_Traffic_Light_Row+0x2b4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <FSM_Traffic_Light_Row+0x2a8>)
 80009c6:	6013      	str	r3, [r2, #0]
			uart_transmit();
 80009c8:	f000 fde0 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fd37 	bl	8001440 <setTimer1>
			break;
 80009d2:	e152      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
 80009d4:	200000cc 	.word	0x200000cc
 80009d8:	200000dc 	.word	0x200000dc
 80009dc:	2000001c 	.word	0x2000001c
 80009e0:	20000014 	.word	0x20000014
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	20000010 	.word	0x20000010
 80009ec:	200000f8 	.word	0x200000f8
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	20000018 	.word	0x20000018
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	20000024 	.word	0x20000024
		}
		if(buttonPressed_flag[0]){
 8000a00:	4b9f      	ldr	r3, [pc, #636]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00f      	beq.n	8000a28 <FSM_Traffic_Light_Row+0x2f4>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000a08:	4b9d      	ldr	r3, [pc, #628]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = yellow_time;
 8000a0e:	4b9d      	ldr	r3, [pc, #628]	; (8000c84 <FSM_Traffic_Light_Row+0x550>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a9d      	ldr	r2, [pc, #628]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000a14:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_YEL;
 8000a16:	4b9d      	ldr	r3, [pc, #628]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000a18:	2209      	movs	r2, #9
 8000a1a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000a1c:	f000 fdb6 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f000 fd0c 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000a28:	4b95      	ldr	r3, [pc, #596]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00a      	beq.n	8000a46 <FSM_Traffic_Light_Row+0x312>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000a30:	4b93      	ldr	r3, [pc, #588]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000a36:	f7ff fe69 	bl	800070c <changeTime>
			uart_transmit();
 8000a3a:	f000 fda7 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a42:	f000 fcfd 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000a46:	4b8e      	ldr	r3, [pc, #568]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a48:	789b      	ldrb	r3, [r3, #2]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 810c 	beq.w	8000c68 <FSM_Traffic_Light_Row+0x534>
			/* Save value if button 2 is pressed*/
			buttonPressed_flag[2] = 0;
 8000a50:	4b8b      	ldr	r3, [pc, #556]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	709a      	strb	r2, [r3, #2]
			green_time = Set_TL_Time;
 8000a56:	4b8c      	ldr	r3, [pc, #560]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a8d      	ldr	r2, [pc, #564]	; (8000c90 <FSM_Traffic_Light_Row+0x55c>)
 8000a5c:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000a5e:	4b8d      	ldr	r3, [pc, #564]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <FSM_Traffic_Light_Row+0x550>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	441a      	add	r2, r3
 8000a68:	4b89      	ldr	r3, [pc, #548]	; (8000c90 <FSM_Traffic_Light_Row+0x55c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2264      	movs	r2, #100	; 0x64
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	4a88      	ldr	r2, [pc, #544]	; (8000c98 <FSM_Traffic_Light_Row+0x564>)
 8000a76:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f000 fce0 	bl	8001440 <setTimer1>
		}
		break;
 8000a80:	e0f2      	b.n	8000c68 <FSM_Traffic_Light_Row+0x534>
	case SET_YEL:
		if(timer1Flag == 1){
 8000a82:	4b86      	ldr	r3, [pc, #536]	; (8000c9c <FSM_Traffic_Light_Row+0x568>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d10f      	bne.n	8000aaa <FSM_Traffic_Light_Row+0x376>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a8a:	4b80      	ldr	r3, [pc, #512]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000a90:	4b83      	ldr	r3, [pc, #524]	; (8000ca0 <FSM_Traffic_Light_Row+0x56c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000a96:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a82      	ldr	r2, [pc, #520]	; (8000ca4 <FSM_Traffic_Light_Row+0x570>)
 8000a9c:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000a9e:	f000 fd75 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f000 fccc 	bl	8001440 <setTimer1>
			break;
 8000aa8:	e0e7      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 8000aaa:	4b75      	ldr	r3, [pc, #468]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d015      	beq.n	8000ade <FSM_Traffic_Light_Row+0x3aa>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000ab2:	4b73      	ldr	r3, [pc, #460]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a72      	ldr	r2, [pc, #456]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000abe:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000ac0:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a77      	ldr	r2, [pc, #476]	; (8000ca4 <FSM_Traffic_Light_Row+0x570>)
 8000ac6:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000ac8:	4b75      	ldr	r3, [pc, #468]	; (8000ca0 <FSM_Traffic_Light_Row+0x56c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000ace:	4b6f      	ldr	r3, [pc, #444]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000ad4:	f000 fd5a 	bl	800158c <uart_transmit>

			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f000 fcb1 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000ade:	4b68      	ldr	r3, [pc, #416]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00a      	beq.n	8000afc <FSM_Traffic_Light_Row+0x3c8>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000ae6:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000aec:	f7ff fe0e 	bl	800070c <changeTime>
			uart_transmit();
 8000af0:	f000 fd4c 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af8:	f000 fca2 	bl	8001440 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000afc:	4b60      	ldr	r3, [pc, #384]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f000 80b3 	beq.w	8000c6c <FSM_Traffic_Light_Row+0x538>
			/* Save value if button 2 is pressed */
			buttonPressed_flag[2] = 0;
 8000b06:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	709a      	strb	r2, [r3, #2]
			yellow_time = Set_TL_Time;
 8000b0c:	4b5e      	ldr	r3, [pc, #376]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a5c      	ldr	r2, [pc, #368]	; (8000c84 <FSM_Traffic_Light_Row+0x550>)
 8000b12:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <FSM_Traffic_Light_Row+0x550>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	4b5c      	ldr	r3, [pc, #368]	; (8000c90 <FSM_Traffic_Light_Row+0x55c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	4a5b      	ldr	r2, [pc, #364]	; (8000c98 <FSM_Traffic_Light_Row+0x564>)
 8000b2c:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b32:	f000 fc85 	bl	8001440 <setTimer1>
		}
		break;
 8000b36:	e099      	b.n	8000c6c <FSM_Traffic_Light_Row+0x538>

	/* MANUAL MODE */
	case MANUAL_RED:
		if(buttonPressed_flag[1]){
 8000b38:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00c      	beq.n	8000b5a <FSM_Traffic_Light_Row+0x426>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000b40:	f000 fd24 	bl	800158c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_GREEN;
 8000b4a:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_RED;
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000b56:	f7ff fdbf 	bl	80006d8 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8086 	beq.w	8000c70 <FSM_Traffic_Light_Row+0x53c>
			/* Back to AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000b64:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000b70:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a4b      	ldr	r2, [pc, #300]	; (8000ca4 <FSM_Traffic_Light_Row+0x570>)
 8000b78:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <FSM_Traffic_Light_Row+0x56c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000b88:	2206      	movs	r2, #6
 8000b8a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000b8c:	f000 fcfe 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f000 fc55 	bl	8001440 <setTimer1>
		}
		break;
 8000b96:	e06b      	b.n	8000c70 <FSM_Traffic_Light_Row+0x53c>
	case MANUAL_GREEN:
		if(buttonPressed_flag[1]){
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00c      	beq.n	8000bba <FSM_Traffic_Light_Row+0x486>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000ba0:	f000 fcf4 	bl	800158c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_YEL;
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000bac:	2205      	movs	r2, #5
 8000bae:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_YEL;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000bb2:	2205      	movs	r2, #5
 8000bb4:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000bb6:	f7ff fd8f 	bl	80006d8 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d058      	beq.n	8000c74 <FSM_Traffic_Light_Row+0x540>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000bce:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <FSM_Traffic_Light_Row+0x570>)
 8000bd6:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000bd8:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <FSM_Traffic_Light_Row+0x56c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000be6:	2206      	movs	r2, #6
 8000be8:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000bea:	f000 fccf 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	f000 fc26 	bl	8001440 <setTimer1>
		}
		break;
 8000bf4:	e03e      	b.n	8000c74 <FSM_Traffic_Light_Row+0x540>
	case MANUAL_YEL:
		if(buttonPressed_flag[1]){
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00c      	beq.n	8000c18 <FSM_Traffic_Light_Row+0x4e4>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000bfe:	f000 fcc5 	bl	800158c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000c14:	f7ff fd60 	bl	80006d8 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d02b      	beq.n	8000c78 <FSM_Traffic_Light_Row+0x544>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <FSM_Traffic_Light_Row+0x54c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <FSM_Traffic_Light_Row+0x554>)
 8000c2c:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <FSM_Traffic_Light_Row+0x560>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <FSM_Traffic_Light_Row+0x570>)
 8000c34:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <FSM_Traffic_Light_Row+0x56c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <FSM_Traffic_Light_Row+0x558>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <FSM_Traffic_Light_Row+0x574>)
 8000c44:	2206      	movs	r2, #6
 8000c46:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c48:	f000 fca0 	bl	800158c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f000 fbf7 	bl	8001440 <setTimer1>
		}
		break;
 8000c52:	e011      	b.n	8000c78 <FSM_Traffic_Light_Row+0x544>
	default:
		break;
 8000c54:	bf00      	nop
 8000c56:	e010      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c58:	bf00      	nop
 8000c5a:	e00e      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c5c:	bf00      	nop
 8000c5e:	e00c      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c60:	bf00      	nop
 8000c62:	e00a      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c64:	bf00      	nop
 8000c66:	e008      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c68:	bf00      	nop
 8000c6a:	e006      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c6c:	bf00      	nop
 8000c6e:	e004      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c70:	bf00      	nop
 8000c72:	e002      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <FSM_Traffic_Light_Row+0x546>
		break;
 8000c78:	bf00      	nop
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000c8 	.word	0x200000c8
 8000c84:	20000018 	.word	0x20000018
 8000c88:	200000f8 	.word	0x200000f8
 8000c8c:	200000cc 	.word	0x200000cc
 8000c90:	20000014 	.word	0x20000014
 8000c94:	20000010 	.word	0x20000010
 8000c98:	20000024 	.word	0x20000024
 8000c9c:	200000dc 	.word	0x200000dc
 8000ca0:	200000c4 	.word	0x200000c4
 8000ca4:	2000001c 	.word	0x2000001c
 8000ca8:	2000000c 	.word	0x2000000c

08000cac <FSM_Traffic_Light_Col>:

void FSM_Traffic_Light_Col(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Col) {
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <FSM_Traffic_Light_Col+0xfc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d86b      	bhi.n	8000d90 <FSM_Traffic_Light_Col+0xe4>
 8000cb8:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <FSM_Traffic_Light_Col+0x14>)
 8000cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbe:	bf00      	nop
 8000cc0:	08000cdd 	.word	0x08000cdd
 8000cc4:	08000d0d 	.word	0x08000d0d
 8000cc8:	08000d3d 	.word	0x08000d3d
 8000ccc:	08000d91 	.word	0x08000d91
 8000cd0:	08000d91 	.word	0x08000d91
 8000cd4:	08000d91 	.word	0x08000d91
 8000cd8:	08000d6d 	.word	0x08000d6d
	/* The first three states are similar to ROW */
	case AUTO_RED:
		if(timer2Flag == 1){
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <FSM_Traffic_Light_Col+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d157      	bne.n	8000d94 <FSM_Traffic_Light_Col+0xe8>
			traffic_light_remain_time_col--;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000cec:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <FSM_Traffic_Light_Col+0x58>
				FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <FSM_Traffic_Light_Col+0xfc>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = green_time;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <FSM_Traffic_Light_Col+0x108>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d02:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f000 fbaf 	bl	8001468 <setTimer2>
		}
		break;
 8000d0a:	e043      	b.n	8000d94 <FSM_Traffic_Light_Col+0xe8>
	case AUTO_GREEN:
		if(timer2Flag == 1){
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <FSM_Traffic_Light_Col+0x100>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d141      	bne.n	8000d98 <FSM_Traffic_Light_Col+0xec>
			traffic_light_remain_time_col--;
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d1c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <FSM_Traffic_Light_Col+0x88>
				FSM_Traffic_Light_State_Col = AUTO_YEL;
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <FSM_Traffic_Light_Col+0xfc>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = yellow_time;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <FSM_Traffic_Light_Col+0x10c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d32:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f000 fb97 	bl	8001468 <setTimer2>
		}
		break;
 8000d3a:	e02d      	b.n	8000d98 <FSM_Traffic_Light_Col+0xec>
	case AUTO_YEL:
		if(timer2Flag == 1){
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <FSM_Traffic_Light_Col+0x100>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d12b      	bne.n	8000d9c <FSM_Traffic_Light_Col+0xf0>
			traffic_light_remain_time_col--;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d4c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d106      	bne.n	8000d64 <FSM_Traffic_Light_Col+0xb8>
				FSM_Traffic_Light_State_Col = AUTO_RED;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <FSM_Traffic_Light_Col+0xfc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = red_time;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <FSM_Traffic_Light_Col+0x110>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d62:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 fb7f 	bl	8001468 <setTimer2>
		}
		break;
 8000d6a:	e017      	b.n	8000d9c <FSM_Traffic_Light_Col+0xf0>
	case BLACK_HOLE:
		/* This is trap state to force Col stop */
		if(To_Default_State == 1){
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <FSM_Traffic_Light_Col+0x114>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d115      	bne.n	8000da0 <FSM_Traffic_Light_Col+0xf4>
			To_Default_State = 0;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <FSM_Traffic_Light_Col+0x114>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <FSM_Traffic_Light_Col+0xfc>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_col = green_time;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <FSM_Traffic_Light_Col+0x108>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <FSM_Traffic_Light_Col+0x104>)
 8000d86:	6013      	str	r3, [r2, #0]
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d88:	2064      	movs	r0, #100	; 0x64
 8000d8a:	f000 fb6d 	bl	8001468 <setTimer2>
		}
		break;
 8000d8e:	e007      	b.n	8000da0 <FSM_Traffic_Light_Col+0xf4>
	default:
		break;
 8000d90:	bf00      	nop
 8000d92:	e006      	b.n	8000da2 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000d94:	bf00      	nop
 8000d96:	e004      	b.n	8000da2 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000d98:	bf00      	nop
 8000d9a:	e002      	b.n	8000da2 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000d9c:	bf00      	nop
 8000d9e:	e000      	b.n	8000da2 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000da0:	bf00      	nop
	}
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	200000e4 	.word	0x200000e4
 8000db0:	20000020 	.word	0x20000020
 8000db4:	20000014 	.word	0x20000014
 8000db8:	20000018 	.word	0x20000018
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	200000c4 	.word	0x200000c4

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fc6c 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f824 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f000 f950 	bl	8001074 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dd4:	f000 f862 	bl	8000e9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 f922 	bl	8001020 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ddc:	f000 f8aa 	bl	8000f34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <main+0x4c>)
 8000de2:	f001 fc9d 	bl	8002720 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000de6:	2100      	movs	r1, #0
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <main+0x50>)
 8000dea:	f001 fd43 	bl	8002874 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000dee:	2064      	movs	r0, #100	; 0x64
 8000df0:	f000 fb26 	bl	8001440 <setTimer1>
  setTimer2(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fb37 	bl	8001468 <setTimer2>
  while (1)
  {
	  FSM_Traffic_Light_Row();
 8000dfa:	f7ff fc9b 	bl	8000734 <FSM_Traffic_Light_Row>
	  FSM_Traffic_Light_Col();
 8000dfe:	f7ff ff55 	bl	8000cac <FSM_Traffic_Light_Col>
	  FSM_Pedestrian();
 8000e02:	f7ff fbc9 	bl	8000598 <FSM_Pedestrian>
	  display_traffic_light();
 8000e06:	f7ff fab3 	bl	8000370 <display_traffic_light>
	  FSM_Buzzer();
 8000e0a:	f7ff fa67 	bl	80002dc <FSM_Buzzer>
	  FSM_Traffic_Light_Row();
 8000e0e:	e7f4      	b.n	8000dfa <main+0x36>
 8000e10:	20000154 	.word	0x20000154
 8000e14:	2000010c 	.word	0x2000010c

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 f88a 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fff7 	bl	8001e4c <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e64:	f000 f980 	bl	8001168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fa62 	bl	800234c <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e8e:	f000 f96b 	bl	8001168 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	; 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ec2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ed0:	223f      	movs	r2, #63	; 0x3f
 8000ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ee2:	f001 fbcd 	bl	8002680 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eec:	f000 f93c 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000efe:	f001 ff21 	bl	8002d44 <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f08:	f000 f92e 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000f1a:	f002 fa9f 	bl	800345c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f24:	f000 f920 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000154 	.word	0x20000154

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f66:	4a2d      	ldr	r2, [pc, #180]	; (800101c <MX_TIM3_Init+0xe8>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f6c:	223f      	movs	r2, #63	; 0x3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4823      	ldr	r0, [pc, #140]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000f8c:	f001 fb78 	bl	8002680 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f96:	f000 f8e7 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481c      	ldr	r0, [pc, #112]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fa8:	f001 fecc 	bl	8002d44 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fb2:	f000 f8d9 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fb8:	f001 fc04 	bl	80027c4 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fc2:	f000 f8d1 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000fd6:	f002 fa41 	bl	800345c <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe0:	f000 f8c2 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 8000fe8:	23c7      	movs	r3, #199	; 0xc7
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM3_Init+0xe4>)
 8000ffc:	f001 fde4 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001006:	f000 f8af 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM3_Init+0xe4>)
 800100c:	f000 f91c 	bl	8001248 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000010c 	.word	0x2000010c
 800101c:	40000400 	.word	0x40000400

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001058:	f002 fa70 	bl	800353c <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f881 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000019c 	.word	0x2000019c
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_GPIO_Init+0xd0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <MX_GPIO_Init+0xd0>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010be:	4822      	ldr	r0, [pc, #136]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010c0:	f000 feab 	bl	8001e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <MX_GPIO_Init+0xd8>)
 80010cc:	f000 fea5 	bl	8001e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDE_Pin BUTTON_MOD_Pin BUTTON_IC_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDE_Pin|BUTTON_MOD_Pin|BUTTON_IC_Pin;
 80010d0:	2313      	movs	r3, #19
 80010d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <MX_GPIO_Init+0xd8>)
 80010e4:	f000 fcfe 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_Pin;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_SET_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010fc:	f000 fcf2 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL1_Pin TL1_SIGNAL2_Pin TL2_SIGNAL2_Pin TL2_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin;
 8001100:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <MX_GPIO_Init+0xd4>)
 800111a:	f000 fce3 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL2_Pin TL1_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin;
 800111e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0xd8>)
 8001138:	f000 fcd4 	bl	8001ae4 <HAL_GPIO_Init>

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40010800 	.word	0x40010800

08001150 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	timerRun();
 8001158:	f000 f9c2 	bl	80014e0 <timerRun>
	button_reading();
 800115c:	f7fe fff6 	bl	800014c <button_reading>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_MspInit+0x5c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_MspInit+0x5c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_MspInit+0x5c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x5c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x5c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x5c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_MspInit+0x60>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_MspInit+0x60>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d114      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201c      	movs	r0, #28
 8001208:	f000 fb85 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f000 fb9e 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001212:	e010      	b.n	8001236 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_TIM_Base_MspInit+0x6c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_TIM_Base_MspInit+0x68>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40000400 	.word	0x40000400

08001248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_TIM_MspPostInit+0x58>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d117      	bne.n	8001298 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_TIM_MspPostInit+0x5c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_TIM_MspPostInit+0x5c>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_TIM_MspPostInit+0x5c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_TIM_MspPostInit+0x60>)
 8001294:	f000 fc26 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40000400 	.word	0x40000400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010800 	.word	0x40010800

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_UART_MspInit+0x98>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d137      	bne.n	800133c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d6:	61d3      	str	r3, [r2, #28]
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x9c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012fc:	2304      	movs	r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_UART_MspInit+0xa0>)
 8001310:	f000 fbe8 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001314:	2308      	movs	r3, #8
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <HAL_UART_MspInit+0xa0>)
 8001328:	f000 fbdc 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f000 faf0 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001336:	2026      	movs	r0, #38	; 0x26
 8001338:	f000 fb09 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f9cb 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM2_IRQHandler+0x10>)
 80013a6:	f001 fb07 	bl	80029b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000154 	.word	0x20000154

080013b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART2_IRQHandler+0x10>)
 80013ba:	f002 f99f 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000019c 	.word	0x2000019c

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f002 fd78 	bl	8003eec <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20005000 	.word	0x20005000
 8001428:	00000400 	.word	0x00000400
 800142c:	200000fc 	.word	0x200000fc
 8001430:	20000218 	.word	0x20000218

08001434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <setTimer1>:
 */


#include "timer.h"

void setTimer1(int duration){             // first trafic light
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	timer1Counter = duration/TICK;
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <setTimer1+0x20>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <setTimer1+0x24>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200000d8 	.word	0x200000d8
 8001464:	200000dc 	.word	0x200000dc

08001468 <setTimer2>:
void setTimer2(int duration){            // second traffc light
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timer2Counter = duration/TICK;
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <setTimer2+0x20>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
	timer2Flag = 0;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <setTimer2+0x24>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200000e0 	.word	0x200000e0
 800148c:	200000e4 	.word	0x200000e4

08001490 <setTimer3>:
void setTimer3(int duration){            // timer for pedestrian light
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	timer3Counter = duration/TICK;
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <setTimer3+0x20>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
	timer3Flag = 0;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <setTimer3+0x24>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200000e8 	.word	0x200000e8
 80014b4:	200000ec 	.word	0x200000ec

080014b8 <setTimer4>:
void setTimer4(int duration){            // buzzer timer
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	timer4Counter = duration/TICK;
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <setTimer4+0x20>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
	timer4Flag = 0;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <setTimer4+0x24>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200000f0 	.word	0x200000f0
 80014dc:	200000f4 	.word	0x200000f4

080014e0 <timerRun>:
void setTimer5(int duration){            // extra timer
    timer5Counter = duration/TICK;
    timer5Flag = 0;
}
// Run all timer
void timerRun(){
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <timerRun+0x8c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd0b      	ble.n	8001504 <timerRun+0x24>
		timer1Counter--;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <timerRun+0x8c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <timerRun+0x8c>)
 80014f4:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <timerRun+0x8c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dc02      	bgt.n	8001504 <timerRun+0x24>
			timer1Flag = 1;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <timerRun+0x90>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2Counter > 0){
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <timerRun+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd0b      	ble.n	8001524 <timerRun+0x44>
		timer2Counter--;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <timerRun+0x94>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <timerRun+0x94>)
 8001514:	6013      	str	r3, [r2, #0]
		if(timer2Counter <= 0){
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <timerRun+0x94>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc02      	bgt.n	8001524 <timerRun+0x44>
			timer2Flag = 1;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <timerRun+0x98>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3Counter > 0){
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <timerRun+0x9c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd0b      	ble.n	8001544 <timerRun+0x64>
		timer3Counter--;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <timerRun+0x9c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <timerRun+0x9c>)
 8001534:	6013      	str	r3, [r2, #0]
		if(timer3Counter <= 0){
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <timerRun+0x9c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	dc02      	bgt.n	8001544 <timerRun+0x64>
			timer3Flag = 1;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <timerRun+0xa0>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4Counter > 0){
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <timerRun+0xa4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd0b      	ble.n	8001564 <timerRun+0x84>
		timer4Counter--;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <timerRun+0xa4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <timerRun+0xa4>)
 8001554:	6013      	str	r3, [r2, #0]
		if(timer4Counter <= 0){
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <timerRun+0xa4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc02      	bgt.n	8001564 <timerRun+0x84>
			timer4Flag = 1;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <timerRun+0xa8>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200000d8 	.word	0x200000d8
 8001570:	200000dc 	.word	0x200000dc
 8001574:	200000e0 	.word	0x200000e0
 8001578:	200000e4 	.word	0x200000e4
 800157c:	200000e8 	.word	0x200000e8
 8001580:	200000ec 	.word	0x200000ec
 8001584:	200000f0 	.word	0x200000f0
 8001588:	200000f4 	.word	0x200000f4

0800158c <uart_transmit>:
 *      Author: Minh Duc Quach
 */

#include "uart.h"

void uart_transmit(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	switch(FSM_Traffic_Light_State_Row){
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <uart_transmit+0xb0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b05      	cmp	r3, #5
 8001596:	dc02      	bgt.n	800159e <uart_transmit+0x12>
 8001598:	2b00      	cmp	r3, #0
 800159a:	da04      	bge.n	80015a6 <uart_transmit+0x1a>
		case SET_YEL:
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
			break;
		default:
			break;
 800159c:	e04b      	b.n	8001636 <uart_transmit+0xaa>
 800159e:	3b07      	subs	r3, #7
	switch(FSM_Traffic_Light_State_Row){
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d848      	bhi.n	8001636 <uart_transmit+0xaa>
 80015a4:	e023      	b.n	80015ee <uart_transmit+0x62>
			if (traffic_light_remain_time_row < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", traffic_light_remain_time_row), 1000);
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <uart_transmit+0xb4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b09      	cmp	r3, #9
 80015ac:	dc0f      	bgt.n	80015ce <uart_transmit+0x42>
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <uart_transmit+0xb4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4923      	ldr	r1, [pc, #140]	; (8001644 <uart_transmit+0xb8>)
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <uart_transmit+0xbc>)
 80015b8:	f002 fcca 	bl	8003f50 <siprintf>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c4:	4920      	ldr	r1, [pc, #128]	; (8001648 <uart_transmit+0xbc>)
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <uart_transmit+0xc0>)
 80015c8:	f002 f805 	bl	80035d6 <HAL_UART_Transmit>
			break;
 80015cc:	e034      	b.n	8001638 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", traffic_light_remain_time_row), 1000);
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <uart_transmit+0xb4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	491e      	ldr	r1, [pc, #120]	; (8001650 <uart_transmit+0xc4>)
 80015d6:	481c      	ldr	r0, [pc, #112]	; (8001648 <uart_transmit+0xbc>)
 80015d8:	f002 fcba 	bl	8003f50 <siprintf>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	4918      	ldr	r1, [pc, #96]	; (8001648 <uart_transmit+0xbc>)
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <uart_transmit+0xc0>)
 80015e8:	f001 fff5 	bl	80035d6 <HAL_UART_Transmit>
			break;
 80015ec:	e024      	b.n	8001638 <uart_transmit+0xac>
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <uart_transmit+0xc8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b09      	cmp	r3, #9
 80015f4:	dc0f      	bgt.n	8001616 <uart_transmit+0x8a>
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <uart_transmit+0xc8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <uart_transmit+0xb8>)
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <uart_transmit+0xbc>)
 8001600:	f002 fca6 	bl	8003f50 <siprintf>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <uart_transmit+0xbc>)
 800160e:	480f      	ldr	r0, [pc, #60]	; (800164c <uart_transmit+0xc0>)
 8001610:	f001 ffe1 	bl	80035d6 <HAL_UART_Transmit>
			break;
 8001614:	e010      	b.n	8001638 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <uart_transmit+0xc8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <uart_transmit+0xc4>)
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <uart_transmit+0xbc>)
 8001620:	f002 fc96 	bl	8003f50 <siprintf>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <uart_transmit+0xbc>)
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <uart_transmit+0xc0>)
 8001630:	f001 ffd1 	bl	80035d6 <HAL_UART_Transmit>
			break;
 8001634:	e000      	b.n	8001638 <uart_transmit+0xac>
			break;
 8001636:	bf00      	nop
	}
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200000cc 	.word	0x200000cc
 8001640:	2000001c 	.word	0x2000001c
 8001644:	080047dc 	.word	0x080047dc
 8001648:	200001e4 	.word	0x200001e4
 800164c:	2000019c 	.word	0x2000019c
 8001650:	080047e8 	.word	0x080047e8
 8001654:	200000f8 	.word	0x200000f8

08001658 <Reset_Handler>:
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
 800165e:	2300      	movs	r3, #0
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:
 8001662:	58d4      	ldr	r4, [r2, r3]
 8001664:	50c4      	str	r4, [r0, r3]
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:
 8001668:	18c4      	adds	r4, r0, r3
 800166a:	428c      	cmp	r4, r1
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
 8001672:	2300      	movs	r3, #0
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:
 800167a:	42a2      	cmp	r2, r4
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>
 800167e:	f7ff fed9 	bl	8001434 <SystemInit>
 8001682:	f002 fc39 	bl	8003ef8 <__libc_init_array>
 8001686:	f7ff fb9d 	bl	8000dc4 <main>
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000
 8001690:	20000098 	.word	0x20000098
 8001694:	08004858 	.word	0x08004858
 8001698:	20000098 	.word	0x20000098
 800169c:	20000218 	.word	0x20000218

080016a0 <ADC1_2_IRQHandler>:
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_Init+0x28>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_Init+0x28>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f923 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fd58 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f93b 	bl	800196a <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f903 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000028 	.word	0x20000028
 8001728:	20000030 	.word	0x20000030
 800172c:	2000002c 	.word	0x2000002c

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x1c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_IncTick+0x20>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_IncTick+0x20>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000030 	.word	0x20000030
 8001750:	20000204 	.word	0x20000204

08001754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <HAL_GetTick+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000204 	.word	0x20000204

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4906      	ldr	r1, [pc, #24]	; (8001800 <__NVIC_EnableIRQ+0x34>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff90 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff2d 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff42 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff90 	bl	8001858 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff35 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001994:	2b02      	cmp	r3, #2
 8001996:	d008      	beq.n	80019aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2204      	movs	r2, #4
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e020      	b.n	80019ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020e 	bic.w	r2, r2, #14
 80019b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d005      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2204      	movs	r2, #4
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e051      	b.n	8001abe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 020e 	bic.w	r2, r2, #14
 8001a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_DMA_Abort_IT+0xd0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d029      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xa0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_DMA_Abort_IT+0xd4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x9c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_DMA_Abort_IT+0xd8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01a      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x96>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_DMA_Abort_IT+0xdc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d012      	beq.n	8001a88 <HAL_DMA_Abort_IT+0x90>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_DMA_Abort_IT+0xe0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00a      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x8a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_DMA_Abort_IT+0xe4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d102      	bne.n	8001a7c <HAL_DMA_Abort_IT+0x84>
 8001a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a7a:	e00e      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	e00b      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a86:	e008      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	e002      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a94:	2310      	movs	r3, #16
 8001a96:	e000      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_DMA_Abort_IT+0xe8>)
 8001a9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
    } 
  }
  return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	4002001c 	.word	0x4002001c
 8001ad0:	40020030 	.word	0x40020030
 8001ad4:	40020044 	.word	0x40020044
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	4002006c 	.word	0x4002006c
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e169      	b.n	8001dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af8:	2201      	movs	r2, #1
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8158 	bne.w	8001dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a9a      	ldr	r2, [pc, #616]	; (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d05e      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b20:	4a98      	ldr	r2, [pc, #608]	; (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d875      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b26:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d058      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b2c:	4a96      	ldr	r2, [pc, #600]	; (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d86f      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b32:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d052      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b38:	4a94      	ldr	r2, [pc, #592]	; (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d869      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d04c      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b44:	4a92      	ldr	r2, [pc, #584]	; (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d863      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d046      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b50:	4a90      	ldr	r2, [pc, #576]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d85d      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d82a      	bhi.n	8001bb0 <HAL_GPIO_Init+0xcc>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d859      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b5e:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <HAL_GPIO_Init+0x80>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bb9 	.word	0x08001bb9
 8001b6c:	08001bcb 	.word	0x08001bcb
 8001b70:	08001c0d 	.word	0x08001c0d
 8001b74:	08001c13 	.word	0x08001c13
 8001b78:	08001c13 	.word	0x08001c13
 8001b7c:	08001c13 	.word	0x08001c13
 8001b80:	08001c13 	.word	0x08001c13
 8001b84:	08001c13 	.word	0x08001c13
 8001b88:	08001c13 	.word	0x08001c13
 8001b8c:	08001c13 	.word	0x08001c13
 8001b90:	08001c13 	.word	0x08001c13
 8001b94:	08001c13 	.word	0x08001c13
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001c13 	.word	0x08001c13
 8001ba0:	08001c13 	.word	0x08001c13
 8001ba4:	08001c13 	.word	0x08001c13
 8001ba8:	08001bc1 	.word	0x08001bc1
 8001bac:	08001bd5 	.word	0x08001bd5
 8001bb0:	4a79      	ldr	r2, [pc, #484]	; (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bb6:	e02c      	b.n	8001c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e029      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e024      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e01f      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e01a      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be6:	2304      	movs	r3, #4
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e013      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	611a      	str	r2, [r3, #16]
          break;
 8001bfe:	e009      	b.n	8001c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	615a      	str	r2, [r3, #20]
          break;
 8001c0a:	e003      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          break;
 8001c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d801      	bhi.n	8001c1e <HAL_GPIO_Init+0x13a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_Init+0x13e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d802      	bhi.n	8001c30 <HAL_GPIO_Init+0x14c>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x152>
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	3b08      	subs	r3, #8
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80b1 	beq.w	8001dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a40      	ldr	r2, [pc, #256]	; (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3f      	ldr	r2, [pc, #252]	; (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <HAL_GPIO_Init+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce2:	492f      	ldr	r1, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	492c      	ldr	r1, [pc, #176]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4928      	ldr	r1, [pc, #160]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4922      	ldr	r1, [pc, #136]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	491e      	ldr	r1, [pc, #120]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4918      	ldr	r1, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4914      	ldr	r1, [pc, #80]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d021      	beq.n	8001db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e021      	b.n	8001dc6 <HAL_GPIO_Init+0x2e2>
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4909      	ldr	r1, [pc, #36]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f ae8e 	bne.w	8001af8 <HAL_GPIO_Init+0x14>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	372c      	adds	r7, #44	; 0x2c
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e001      	b.n	8001e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
 8001e26:	4613      	mov	r3, r2
 8001e28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2a:	787b      	ldrb	r3, [r7, #1]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e26c      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e78:	4b8f      	ldr	r3, [pc, #572]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
 8001e84:	4b8c      	ldr	r3, [pc, #560]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d06c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x12c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d168      	bne.n	8001f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e246      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76>
 8001eb4:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a7f      	ldr	r2, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e02e      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b7b      	ldr	r3, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7a      	ldr	r2, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0xbc>
 8001eee:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a71      	ldr	r2, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001f08:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a67      	ldr	r2, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fc14 	bl	8001754 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fc10 	bl	8001754 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1fa      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe4>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fc00 	bl	8001754 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fbfc 	bl	8001754 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1e6      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x10c>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f86:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f92:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1ba      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4939      	ldr	r1, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x270>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fbb5 	bl	8001754 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff fbb1 	bl	8001754 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e19b      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x270>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fb94 	bl	8001754 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7ff fb90 	bl	8001754 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e17a      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03a      	beq.n	80020d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d019      	beq.n	8002096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff fb74 	bl	8001754 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff fb70 	bl	8001754 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e15a      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fad8 	bl	8002644 <RCC_Delay>
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fb5a 	bl	8001754 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fb56 	bl	8001754 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e140      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420000 	.word	0x42420000
 80020c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e9      	bne.n	80020a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a6 	beq.w	800222a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b97      	ldr	r3, [pc, #604]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b94      	ldr	r3, [pc, #592]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a93      	ldr	r2, [pc, #588]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b91      	ldr	r3, [pc, #580]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b8b      	ldr	r3, [pc, #556]	; (8002344 <HAL_RCC_OscConfig+0x4f8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a8a      	ldr	r2, [pc, #552]	; (8002344 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff fb17 	bl	8001754 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7ff fb13 	bl	8001754 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0fd      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_OscConfig+0x4f8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002150:	4b7b      	ldr	r3, [pc, #492]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a7a      	ldr	r2, [pc, #488]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e02d      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x334>
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a75      	ldr	r2, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b73      	ldr	r3, [pc, #460]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a72      	ldr	r2, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	e01c      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x356>
 8002188:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a6c      	ldr	r2, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a69      	ldr	r2, [pc, #420]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a66      	ldr	r2, [pc, #408]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b64      	ldr	r3, [pc, #400]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a63      	ldr	r2, [pc, #396]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d015      	beq.n	80021ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fac7 	bl	8001754 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fac3 	bl	8001754 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0ab      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCC_OscConfig+0x37e>
 80021ec:	e014      	b.n	8002218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fab1 	bl	8001754 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff faad 	bl	8001754 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e095      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a47      	ldr	r2, [pc, #284]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8081 	beq.w	8002336 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d061      	beq.n	8002304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d146      	bne.n	80022d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_OscConfig+0x4fc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fa81 	bl	8001754 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff fa7d 	bl	8001754 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e067      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d108      	bne.n	8002290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	492d      	ldr	r1, [pc, #180]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a19      	ldr	r1, [r3, #32]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	430b      	orrs	r3, r1
 80022a2:	4927      	ldr	r1, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x4fc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff fa51 	bl	8001754 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7ff fa4d 	bl	8001754 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e037      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
 80022d4:	e02f      	b.n	8002336 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_RCC_OscConfig+0x4fc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fa3a 	bl	8001754 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff fa36 	bl	8001754 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e020      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x498>
 8002302:	e018      	b.n	8002336 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	42420060 	.word	0x42420060

0800234c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d0      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4965      	ldr	r1, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e073      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4936      	ldr	r1, [pc, #216]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7ff f98a 	bl	8001754 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7ff f986 	bl	8001754 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e053      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f8e8 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	08004804 	.word	0x08004804
 8002518:	20000028 	.word	0x20000028
 800251c:	2000002c 	.word	0x2000002c

08002520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b490      	push	{r4, r7}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002528:	1d3c      	adds	r4, r7, #4
 800252a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002530:	f240 2301 	movw	r3, #513	; 0x201
 8002534:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x46>
 800255e:	e02d      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002562:	623b      	str	r3, [r7, #32]
      break;
 8002564:	e02d      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002572:	4413      	add	r3, r2
 8002574:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002578:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0c5b      	lsrs	r3, r3, #17
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002592:	4413      	add	r3, r2
 8002594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	fb02 f203 	mul.w	r2, r2, r3
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e004      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	623b      	str	r3, [r7, #32]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	623b      	str	r3, [r7, #32]
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	6a3b      	ldr	r3, [r7, #32]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc90      	pop	{r4, r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	080047f4 	.word	0x080047f4
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b02      	ldr	r3, [pc, #8]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000028 	.word	0x20000028

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	08004814 	.word	0x08004814

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffde 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08004814 	.word	0x08004814

08002644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <RCC_Delay+0x34>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <RCC_Delay+0x38>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002660:	bf00      	nop
  }
  while (Delay --);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <RCC_Delay+0x1c>
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000028 	.word	0x20000028
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e041      	b.n	8002716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fd96 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4610      	mov	r0, r2
 80026c0:	f000 fc28 	bl	8002f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e03a      	b.n	80027ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x58>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d009      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x58>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_TIM_Base_Start_IT+0x9c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x58>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d111      	bne.n	800279c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d010      	beq.n	80027ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	e007      	b.n	80027ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800

080027c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e041      	b.n	800285a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f839 	bl	8002862 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 fb86 	bl	8002f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_TIM_PWM_Start+0x24>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e022      	b.n	80028de <HAL_TIM_PWM_Start+0x6a>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d109      	bne.n	80028b2 <HAL_TIM_PWM_Start+0x3e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	bf14      	ite	ne
 80028aa:	2301      	movne	r3, #1
 80028ac:	2300      	moveq	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e015      	b.n	80028de <HAL_TIM_PWM_Start+0x6a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d109      	bne.n	80028cc <HAL_TIM_PWM_Start+0x58>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e008      	b.n	80028de <HAL_TIM_PWM_Start+0x6a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e05e      	b.n	80029a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start+0x82>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	e013      	b.n	800291e <HAL_TIM_PWM_Start+0xaa>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d104      	bne.n	8002906 <HAL_TIM_PWM_Start+0x92>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	e00b      	b.n	800291e <HAL_TIM_PWM_Start+0xaa>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d104      	bne.n	8002916 <HAL_TIM_PWM_Start+0xa2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	e003      	b.n	800291e <HAL_TIM_PWM_Start+0xaa>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd74 	bl	8003414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_TIM_PWM_Start+0x138>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d107      	bne.n	8002946 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_TIM_PWM_Start+0x138>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00e      	beq.n	800296e <HAL_TIM_PWM_Start+0xfa>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d009      	beq.n	800296e <HAL_TIM_PWM_Start+0xfa>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_TIM_PWM_Start+0x13c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <HAL_TIM_PWM_Start+0xfa>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_TIM_PWM_Start+0x140>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d010      	beq.n	80029a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	e007      	b.n	80029a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800

080029b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0202 	mvn.w	r2, #2
 80029e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa6f 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa62 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fa71 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d122      	bne.n	8002a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0204 	mvn.w	r2, #4
 8002a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa45 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa38 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa47 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0208 	mvn.w	r2, #8
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa1b 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa0e 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fa1d 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0210 	mvn.w	r2, #16
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9f1 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9e4 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9f3 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0201 	mvn.w	r2, #1
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fb0a 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b80      	cmp	r3, #128	; 0x80
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fce1 	bl	800352a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9b7 	bl	8002f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0220 	mvn.w	r2, #32
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fcac 	bl	8003518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0ac      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	f200 809f 	bhi.w	8002d30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002d31 	.word	0x08002d31
 8002c00:	08002d31 	.word	0x08002d31
 8002c04:	08002d31 	.word	0x08002d31
 8002c08:	08002c6d 	.word	0x08002c6d
 8002c0c:	08002d31 	.word	0x08002d31
 8002c10:	08002d31 	.word	0x08002d31
 8002c14:	08002d31 	.word	0x08002d31
 8002c18:	08002caf 	.word	0x08002caf
 8002c1c:	08002d31 	.word	0x08002d31
 8002c20:	08002d31 	.word	0x08002d31
 8002c24:	08002d31 	.word	0x08002d31
 8002c28:	08002cef 	.word	0x08002cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f9d0 	bl	8002fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
      break;
 8002c6a:	e062      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa16 	bl	80030a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6999      	ldr	r1, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	021a      	lsls	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
      break;
 8002cac:	e041      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa5f 	bl	8003178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0208 	orr.w	r2, r2, #8
 8002cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0204 	bic.w	r2, r2, #4
 8002cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
      break;
 8002cec:	e021      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 faa9 	bl	800324c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69d9      	ldr	r1, [r3, #28]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_ConfigClockSource+0x18>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0b3      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x180>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d03e      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0xd0>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	f200 8087 	bhi.w	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	f000 8085 	beq.w	8002eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d87f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b70      	cmp	r3, #112	; 0x70
 8002dae:	d01a      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xa2>
 8002db0:	2b70      	cmp	r3, #112	; 0x70
 8002db2:	d87b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d050      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x116>
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d877      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b50      	cmp	r3, #80	; 0x50
 8002dbe:	d03c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xf6>
 8002dc0:	2b50      	cmp	r3, #80	; 0x50
 8002dc2:	d873      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d058      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x136>
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d86f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d064      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x156>
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d86b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d060      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x156>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d867      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05c      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x156>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d05a      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002de4:	e062      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f000 faee 	bl	80033d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	609a      	str	r2, [r3, #8]
      break;
 8002e12:	e04e      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f000 fad7 	bl	80033d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e36:	609a      	str	r2, [r3, #8]
      break;
 8002e38:	e03b      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 fa4e 	bl	80032e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2150      	movs	r1, #80	; 0x50
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 faa5 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002e58:	e02b      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 fa6c 	bl	8003344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2160      	movs	r1, #96	; 0x60
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa95 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e01b      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 fa2e 	bl	80032e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2140      	movs	r1, #64	; 0x40
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fa85 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002e98:	e00b      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 fa7c 	bl	80033a2 <TIM_ITRx_SetConfig>
        break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <TIM_Base_SetConfig+0xb8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x30>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x30>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <TIM_Base_SetConfig+0xbc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x30>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <TIM_Base_SetConfig+0xc0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <TIM_Base_SetConfig+0xb8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <TIM_Base_SetConfig+0xbc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <TIM_Base_SetConfig+0xc0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <TIM_Base_SetConfig+0xb8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d103      	bne.n	8002fbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0302 	bic.w	r3, r3, #2
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <TIM_OC1_SetConfig+0xc8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10c      	bne.n	800304e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0308 	bic.w	r3, r3, #8
 800303a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <TIM_OC1_SetConfig+0xc8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40012c00 	.word	0x40012c00

080030a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0320 	bic.w	r3, r3, #32
 80030ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <TIM_OC2_SetConfig+0xd0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10d      	bne.n	8003120 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <TIM_OC2_SetConfig+0xd0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d113      	bne.n	8003150 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800312e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00

08003178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <TIM_OC3_SetConfig+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10d      	bne.n	80031f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <TIM_OC3_SetConfig+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00

0800324c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <TIM_OC4_SetConfig+0x98>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d109      	bne.n	80032c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40012c00 	.word	0x40012c00

080032e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 030a 	bic.w	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0210 	bic.w	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	031b      	lsls	r3, r3, #12
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f043 0307 	orr.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b087      	sub	sp, #28
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	021a      	lsls	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	609a      	str	r2, [r3, #8]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003470:	2302      	movs	r3, #2
 8003472:	e046      	b.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d009      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10c      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800

08003518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e03f      	b.n	80035ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fea2 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800357e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fc25 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b08a      	sub	sp, #40	; 0x28
 80035da:	af02      	add	r7, sp, #8
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d17c      	bne.n	80036f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_UART_Transmit+0x2c>
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e075      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_UART_Transmit+0x3e>
 8003610:	2302      	movs	r3, #2
 8003612:	e06e      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2221      	movs	r2, #33	; 0x21
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362a:	f7fe f893 	bl	8001754 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d108      	bne.n	8003658 <HAL_UART_Transmit+0x82>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e003      	b.n	8003660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003668:	e02a      	b.n	80036c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fa11 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e036      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3302      	adds	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e007      	b.n	80036b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1cf      	bne.n	800366a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2140      	movs	r1, #64	; 0x40
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9e1 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e006      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10d      	bne.n	800374e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x52>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa99 	bl	8003c7e <UART_Receive_IT>
      return;
 800374c:	e17b      	b.n	8003a46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80b1 	beq.w	80038b8 <HAL_UART_IRQHandler+0x1bc>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_UART_IRQHandler+0x70>
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a6 	beq.w	80038b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_UART_IRQHandler+0x90>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_UART_IRQHandler+0xb0>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_UART_IRQHandler+0xd0>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_UART_IRQHandler+0xfa>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_UART_IRQHandler+0xee>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0208 	orr.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 811e 	beq.w	8003a3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_UART_IRQHandler+0x11e>
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa32 	bl	8003c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_UART_IRQHandler+0x146>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d031      	beq.n	80038a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f974 	bl	8003b30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d023      	beq.n	800389e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003864:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	2b00      	cmp	r3, #0
 800386c:	d013      	beq.n	8003896 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4a76      	ldr	r2, [pc, #472]	; (8003a4c <HAL_UART_IRQHandler+0x350>)
 8003874:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f8bc 	bl	80019f8 <HAL_DMA_Abort_IT>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e00e      	b.n	80038b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8ec 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00a      	b.n	80038b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8e8 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e006      	b.n	80038b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8e4 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038b2:	e0c3      	b.n	8003a3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	bf00      	nop
    return;
 80038b6:	e0c1      	b.n	8003a3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 80a1 	bne.w	8003a04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 809b 	beq.w	8003a04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8095 	beq.w	8003a04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d04e      	beq.n	800399c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003908:	8a3b      	ldrh	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8098 	beq.w	8003a40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003914:	8a3a      	ldrh	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	f080 8092 	bcs.w	8003a40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8a3a      	ldrh	r2, [r7, #16]
 8003920:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b20      	cmp	r3, #32
 800392a:	d02b      	beq.n	8003984 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800393a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0210 	bic.w	r2, r2, #16
 8003978:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd ffff 	bl	8001982 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800398c:	b29b      	uxth	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f876 	bl	8003a86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800399a:	e051      	b.n	8003a40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d047      	beq.n	8003a44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80039b4:	8a7b      	ldrh	r3, [r7, #18]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d044      	beq.n	8003a44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0210 	bic.w	r2, r2, #16
 80039f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039f8:	8a7b      	ldrh	r3, [r7, #18]
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f842 	bl	8003a86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a02:	e01f      	b.n	8003a44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_UART_IRQHandler+0x324>
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8c9 	bl	8003bb0 <UART_Transmit_IT>
    return;
 8003a1e:	e012      	b.n	8003a46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_UART_IRQHandler+0x34a>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f90a 	bl	8003c4e <UART_EndTransmit_IT>
    return;
 8003a3a:	e004      	b.n	8003a46 <HAL_UART_IRQHandler+0x34a>
    return;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a44:	bf00      	nop
  }
}
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	08003b89 	.word	0x08003b89

08003a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	e02c      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d028      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <UART_WaitOnFlagUntilTimeout+0x30>
 8003abc:	f7fd fe4a 	bl	8001754 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d21d      	bcs.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ada:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e00f      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d0c3      	beq.n	8003aae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0210 	bic.w	r2, r2, #16
 8003b6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ff66 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b21      	cmp	r3, #33	; 0x21
 8003bc2:	d13e      	bne.n	8003c42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	d114      	bne.n	8003bf8 <UART_Transmit_IT+0x48>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d110      	bne.n	8003bf8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	621a      	str	r2, [r3, #32]
 8003bf6:	e008      	b.n	8003c0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	1c59      	adds	r1, r3, #1
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6211      	str	r1, [r2, #32]
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4619      	mov	r1, r3
 8003c18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff feee 	bl	8003a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b22      	cmp	r3, #34	; 0x22
 8003c90:	f040 8099 	bne.w	8003dc6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d117      	bne.n	8003cce <UART_Receive_IT+0x50>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ccc:	e026      	b.n	8003d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d007      	beq.n	8003cf2 <UART_Receive_IT+0x74>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <UART_Receive_IT+0x82>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e008      	b.n	8003d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d148      	bne.n	8003dc2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0220 	bic.w	r2, r2, #32
 8003d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d123      	bne.n	8003db8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0210 	bic.w	r2, r2, #16
 8003d84:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d10a      	bne.n	8003daa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe68 	bl	8003a86 <HAL_UARTEx_RxEventCallback>
 8003db6:	e002      	b.n	8003dbe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fe52 	bl	8003a62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e002      	b.n	8003dc8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e0a:	f023 030c 	bic.w	r3, r3, #12
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <UART_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fe fbf0 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	e002      	b.n	8003e46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fbd8 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009a      	lsls	r2, r3, #2
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	0119      	lsls	r1, r3, #4
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2064      	movs	r0, #100	; 0x64
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	3332      	adds	r3, #50	; 0x32
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9c:	4419      	add	r1, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	440a      	add	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	51eb851f 	.word	0x51eb851f

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000034 	.word	0x20000034

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	2600      	movs	r6, #0
 8003efc:	4d0c      	ldr	r5, [pc, #48]	; (8003f30 <__libc_init_array+0x38>)
 8003efe:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003f00:	1b64      	subs	r4, r4, r5
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	f000 fc5c 	bl	80047c4 <_init>
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	4d0a      	ldr	r5, [pc, #40]	; (8003f38 <__libc_init_array+0x40>)
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <__libc_init_array+0x44>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08004850 	.word	0x08004850
 8003f34:	08004850 	.word	0x08004850
 8003f38:	08004850 	.word	0x08004850
 8003f3c:	08004854 	.word	0x08004854

08003f40 <memset>:
 8003f40:	4603      	mov	r3, r0
 8003f42:	4402      	add	r2, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <siprintf>:
 8003f50:	b40e      	push	{r1, r2, r3}
 8003f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f56:	b500      	push	{lr}
 8003f58:	b09c      	sub	sp, #112	; 0x70
 8003f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f5c:	9002      	str	r0, [sp, #8]
 8003f5e:	9006      	str	r0, [sp, #24]
 8003f60:	9107      	str	r1, [sp, #28]
 8003f62:	9104      	str	r1, [sp, #16]
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <siprintf+0x38>)
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <siprintf+0x3c>)
 8003f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6c:	9105      	str	r1, [sp, #20]
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	a902      	add	r1, sp, #8
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	f000 f868 	bl	8004048 <_svfiprintf_r>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	9b02      	ldr	r3, [sp, #8]
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	b01c      	add	sp, #112	; 0x70
 8003f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f84:	b003      	add	sp, #12
 8003f86:	4770      	bx	lr
 8003f88:	20000034 	.word	0x20000034
 8003f8c:	ffff0208 	.word	0xffff0208

08003f90 <__ssputs_r>:
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	688e      	ldr	r6, [r1, #8]
 8003f96:	4682      	mov	sl, r0
 8003f98:	429e      	cmp	r6, r3
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4690      	mov	r8, r2
 8003f9e:	461f      	mov	r7, r3
 8003fa0:	d838      	bhi.n	8004014 <__ssputs_r+0x84>
 8003fa2:	898a      	ldrh	r2, [r1, #12]
 8003fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa8:	d032      	beq.n	8004010 <__ssputs_r+0x80>
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	6909      	ldr	r1, [r1, #16]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	eba5 0901 	sub.w	r9, r5, r1
 8003fb4:	6965      	ldr	r5, [r4, #20]
 8003fb6:	444b      	add	r3, r9
 8003fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fc0:	106d      	asrs	r5, r5, #1
 8003fc2:	429d      	cmp	r5, r3
 8003fc4:	bf38      	it	cc
 8003fc6:	461d      	movcc	r5, r3
 8003fc8:	0553      	lsls	r3, r2, #21
 8003fca:	d531      	bpl.n	8004030 <__ssputs_r+0xa0>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f000 fb53 	bl	8004678 <_malloc_r>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	b950      	cbnz	r0, 8003fec <__ssputs_r+0x5c>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f8ca 3000 	str.w	r3, [sl]
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	464a      	mov	r2, r9
 8003fee:	6921      	ldr	r1, [r4, #16]
 8003ff0:	f000 face 	bl	8004590 <memcpy>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	6126      	str	r6, [r4, #16]
 8004002:	444e      	add	r6, r9
 8004004:	6026      	str	r6, [r4, #0]
 8004006:	463e      	mov	r6, r7
 8004008:	6165      	str	r5, [r4, #20]
 800400a:	eba5 0509 	sub.w	r5, r5, r9
 800400e:	60a5      	str	r5, [r4, #8]
 8004010:	42be      	cmp	r6, r7
 8004012:	d900      	bls.n	8004016 <__ssputs_r+0x86>
 8004014:	463e      	mov	r6, r7
 8004016:	4632      	mov	r2, r6
 8004018:	4641      	mov	r1, r8
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	f000 fac6 	bl	80045ac <memmove>
 8004020:	68a3      	ldr	r3, [r4, #8]
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	1b9b      	subs	r3, r3, r6
 8004026:	4432      	add	r2, r6
 8004028:	2000      	movs	r0, #0
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	e7db      	b.n	8003fe8 <__ssputs_r+0x58>
 8004030:	462a      	mov	r2, r5
 8004032:	f000 fb7b 	bl	800472c <_realloc_r>
 8004036:	4606      	mov	r6, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	d1e1      	bne.n	8004000 <__ssputs_r+0x70>
 800403c:	4650      	mov	r0, sl
 800403e:	6921      	ldr	r1, [r4, #16]
 8004040:	f000 face 	bl	80045e0 <_free_r>
 8004044:	e7c7      	b.n	8003fd6 <__ssputs_r+0x46>
	...

08004048 <_svfiprintf_r>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	4698      	mov	r8, r3
 800404e:	898b      	ldrh	r3, [r1, #12]
 8004050:	4607      	mov	r7, r0
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	460d      	mov	r5, r1
 8004056:	4614      	mov	r4, r2
 8004058:	b09d      	sub	sp, #116	; 0x74
 800405a:	d50e      	bpl.n	800407a <_svfiprintf_r+0x32>
 800405c:	690b      	ldr	r3, [r1, #16]
 800405e:	b963      	cbnz	r3, 800407a <_svfiprintf_r+0x32>
 8004060:	2140      	movs	r1, #64	; 0x40
 8004062:	f000 fb09 	bl	8004678 <_malloc_r>
 8004066:	6028      	str	r0, [r5, #0]
 8004068:	6128      	str	r0, [r5, #16]
 800406a:	b920      	cbnz	r0, 8004076 <_svfiprintf_r+0x2e>
 800406c:	230c      	movs	r3, #12
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	e0d1      	b.n	800421a <_svfiprintf_r+0x1d2>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	616b      	str	r3, [r5, #20]
 800407a:	2300      	movs	r3, #0
 800407c:	9309      	str	r3, [sp, #36]	; 0x24
 800407e:	2320      	movs	r3, #32
 8004080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	f04f 0901 	mov.w	r9, #1
 800408a:	f8cd 800c 	str.w	r8, [sp, #12]
 800408e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004234 <_svfiprintf_r+0x1ec>
 8004092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004096:	4623      	mov	r3, r4
 8004098:	469a      	mov	sl, r3
 800409a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409e:	b10a      	cbz	r2, 80040a4 <_svfiprintf_r+0x5c>
 80040a0:	2a25      	cmp	r2, #37	; 0x25
 80040a2:	d1f9      	bne.n	8004098 <_svfiprintf_r+0x50>
 80040a4:	ebba 0b04 	subs.w	fp, sl, r4
 80040a8:	d00b      	beq.n	80040c2 <_svfiprintf_r+0x7a>
 80040aa:	465b      	mov	r3, fp
 80040ac:	4622      	mov	r2, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	4638      	mov	r0, r7
 80040b2:	f7ff ff6d 	bl	8003f90 <__ssputs_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	f000 80aa 	beq.w	8004210 <_svfiprintf_r+0x1c8>
 80040bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040be:	445a      	add	r2, fp
 80040c0:	9209      	str	r2, [sp, #36]	; 0x24
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80a2 	beq.w	8004210 <_svfiprintf_r+0x1c8>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295
 80040d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d6:	f10a 0a01 	add.w	sl, sl, #1
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	9307      	str	r3, [sp, #28]
 80040de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040e2:	931a      	str	r3, [sp, #104]	; 0x68
 80040e4:	4654      	mov	r4, sl
 80040e6:	2205      	movs	r2, #5
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	4851      	ldr	r0, [pc, #324]	; (8004234 <_svfiprintf_r+0x1ec>)
 80040ee:	f000 fa41 	bl	8004574 <memchr>
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	b9d8      	cbnz	r0, 800412e <_svfiprintf_r+0xe6>
 80040f6:	06d0      	lsls	r0, r2, #27
 80040f8:	bf44      	itt	mi
 80040fa:	2320      	movmi	r3, #32
 80040fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004100:	0711      	lsls	r1, r2, #28
 8004102:	bf44      	itt	mi
 8004104:	232b      	movmi	r3, #43	; 0x2b
 8004106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800410a:	f89a 3000 	ldrb.w	r3, [sl]
 800410e:	2b2a      	cmp	r3, #42	; 0x2a
 8004110:	d015      	beq.n	800413e <_svfiprintf_r+0xf6>
 8004112:	4654      	mov	r4, sl
 8004114:	2000      	movs	r0, #0
 8004116:	f04f 0c0a 	mov.w	ip, #10
 800411a:	9a07      	ldr	r2, [sp, #28]
 800411c:	4621      	mov	r1, r4
 800411e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004122:	3b30      	subs	r3, #48	; 0x30
 8004124:	2b09      	cmp	r3, #9
 8004126:	d94e      	bls.n	80041c6 <_svfiprintf_r+0x17e>
 8004128:	b1b0      	cbz	r0, 8004158 <_svfiprintf_r+0x110>
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	e014      	b.n	8004158 <_svfiprintf_r+0x110>
 800412e:	eba0 0308 	sub.w	r3, r0, r8
 8004132:	fa09 f303 	lsl.w	r3, r9, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	46a2      	mov	sl, r4
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	e7d2      	b.n	80040e4 <_svfiprintf_r+0x9c>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbb      	ittet	lt
 800414a:	425b      	neglt	r3, r3
 800414c:	f042 0202 	orrlt.w	r2, r2, #2
 8004150:	9307      	strge	r3, [sp, #28]
 8004152:	9307      	strlt	r3, [sp, #28]
 8004154:	bfb8      	it	lt
 8004156:	9204      	strlt	r2, [sp, #16]
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	2b2e      	cmp	r3, #46	; 0x2e
 800415c:	d10c      	bne.n	8004178 <_svfiprintf_r+0x130>
 800415e:	7863      	ldrb	r3, [r4, #1]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d135      	bne.n	80041d0 <_svfiprintf_r+0x188>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	3402      	adds	r4, #2
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	9203      	str	r2, [sp, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	bfb8      	it	lt
 8004172:	f04f 33ff 	movlt.w	r3, #4294967295
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004244 <_svfiprintf_r+0x1fc>
 800417c:	2203      	movs	r2, #3
 800417e:	4650      	mov	r0, sl
 8004180:	7821      	ldrb	r1, [r4, #0]
 8004182:	f000 f9f7 	bl	8004574 <memchr>
 8004186:	b140      	cbz	r0, 800419a <_svfiprintf_r+0x152>
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	eba0 000a 	sub.w	r0, r0, sl
 800418e:	fa03 f000 	lsl.w	r0, r3, r0
 8004192:	9b04      	ldr	r3, [sp, #16]
 8004194:	3401      	adds	r4, #1
 8004196:	4303      	orrs	r3, r0
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419e:	2206      	movs	r2, #6
 80041a0:	4825      	ldr	r0, [pc, #148]	; (8004238 <_svfiprintf_r+0x1f0>)
 80041a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a6:	f000 f9e5 	bl	8004574 <memchr>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d038      	beq.n	8004220 <_svfiprintf_r+0x1d8>
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <_svfiprintf_r+0x1f4>)
 80041b0:	bb1b      	cbnz	r3, 80041fa <_svfiprintf_r+0x1b2>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	3307      	adds	r3, #7
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	3308      	adds	r3, #8
 80041bc:	9303      	str	r3, [sp, #12]
 80041be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c0:	4433      	add	r3, r6
 80041c2:	9309      	str	r3, [sp, #36]	; 0x24
 80041c4:	e767      	b.n	8004096 <_svfiprintf_r+0x4e>
 80041c6:	460c      	mov	r4, r1
 80041c8:	2001      	movs	r0, #1
 80041ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ce:	e7a5      	b.n	800411c <_svfiprintf_r+0xd4>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f04f 0c0a 	mov.w	ip, #10
 80041d6:	4619      	mov	r1, r3
 80041d8:	3401      	adds	r4, #1
 80041da:	9305      	str	r3, [sp, #20]
 80041dc:	4620      	mov	r0, r4
 80041de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e2:	3a30      	subs	r2, #48	; 0x30
 80041e4:	2a09      	cmp	r2, #9
 80041e6:	d903      	bls.n	80041f0 <_svfiprintf_r+0x1a8>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0c5      	beq.n	8004178 <_svfiprintf_r+0x130>
 80041ec:	9105      	str	r1, [sp, #20]
 80041ee:	e7c3      	b.n	8004178 <_svfiprintf_r+0x130>
 80041f0:	4604      	mov	r4, r0
 80041f2:	2301      	movs	r3, #1
 80041f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f8:	e7f0      	b.n	80041dc <_svfiprintf_r+0x194>
 80041fa:	ab03      	add	r3, sp, #12
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	462a      	mov	r2, r5
 8004200:	4638      	mov	r0, r7
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <_svfiprintf_r+0x1f8>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	f3af 8000 	nop.w
 800420a:	1c42      	adds	r2, r0, #1
 800420c:	4606      	mov	r6, r0
 800420e:	d1d6      	bne.n	80041be <_svfiprintf_r+0x176>
 8004210:	89ab      	ldrh	r3, [r5, #12]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	f53f af2c 	bmi.w	8004070 <_svfiprintf_r+0x28>
 8004218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800421a:	b01d      	add	sp, #116	; 0x74
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	462a      	mov	r2, r5
 8004226:	4638      	mov	r0, r7
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_svfiprintf_r+0x1f8>)
 800422a:	a904      	add	r1, sp, #16
 800422c:	f000 f87c 	bl	8004328 <_printf_i>
 8004230:	e7eb      	b.n	800420a <_svfiprintf_r+0x1c2>
 8004232:	bf00      	nop
 8004234:	0800481c 	.word	0x0800481c
 8004238:	08004826 	.word	0x08004826
 800423c:	00000000 	.word	0x00000000
 8004240:	08003f91 	.word	0x08003f91
 8004244:	08004822 	.word	0x08004822

08004248 <_printf_common>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4616      	mov	r6, r2
 800424e:	4699      	mov	r9, r3
 8004250:	688a      	ldr	r2, [r1, #8]
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4607      	mov	r7, r0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfb8      	it	lt
 800425a:	4613      	movlt	r3, r2
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004262:	460c      	mov	r4, r1
 8004264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004268:	b10a      	cbz	r2, 800426e <_printf_common+0x26>
 800426a:	3301      	adds	r3, #1
 800426c:	6033      	str	r3, [r6, #0]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0699      	lsls	r1, r3, #26
 8004272:	bf42      	ittt	mi
 8004274:	6833      	ldrmi	r3, [r6, #0]
 8004276:	3302      	addmi	r3, #2
 8004278:	6033      	strmi	r3, [r6, #0]
 800427a:	6825      	ldr	r5, [r4, #0]
 800427c:	f015 0506 	ands.w	r5, r5, #6
 8004280:	d106      	bne.n	8004290 <_printf_common+0x48>
 8004282:	f104 0a19 	add.w	sl, r4, #25
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	6832      	ldr	r2, [r6, #0]
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	42ab      	cmp	r3, r5
 800428e:	dc28      	bgt.n	80042e2 <_printf_common+0x9a>
 8004290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004294:	1e13      	subs	r3, r2, #0
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	bf18      	it	ne
 800429a:	2301      	movne	r3, #1
 800429c:	0692      	lsls	r2, r2, #26
 800429e:	d42d      	bmi.n	80042fc <_printf_common+0xb4>
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d020      	beq.n	80042f0 <_printf_common+0xa8>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	68e5      	ldr	r5, [r4, #12]
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf18      	it	ne
 80042ba:	2500      	movne	r5, #0
 80042bc:	6832      	ldr	r2, [r6, #0]
 80042be:	f04f 0600 	mov.w	r6, #0
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	bf08      	it	eq
 80042c6:	1aad      	subeq	r5, r5, r2
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	bf08      	it	eq
 80042cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bfc4      	itt	gt
 80042d4:	1a9b      	subgt	r3, r3, r2
 80042d6:	18ed      	addgt	r5, r5, r3
 80042d8:	341a      	adds	r4, #26
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d11a      	bne.n	8004314 <_printf_common+0xcc>
 80042de:	2000      	movs	r0, #0
 80042e0:	e008      	b.n	80042f4 <_printf_common+0xac>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4649      	mov	r1, r9
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c0      	blx	r8
 80042ec:	3001      	adds	r0, #1
 80042ee:	d103      	bne.n	80042f8 <_printf_common+0xb0>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7c4      	b.n	8004286 <_printf_common+0x3e>
 80042fc:	2030      	movs	r0, #48	; 0x30
 80042fe:	18e1      	adds	r1, r4, r3
 8004300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800430a:	4422      	add	r2, r4
 800430c:	3302      	adds	r3, #2
 800430e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004312:	e7c5      	b.n	80042a0 <_printf_common+0x58>
 8004314:	2301      	movs	r3, #1
 8004316:	4622      	mov	r2, r4
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d0e6      	beq.n	80042f0 <_printf_common+0xa8>
 8004322:	3601      	adds	r6, #1
 8004324:	e7d9      	b.n	80042da <_printf_common+0x92>
	...

08004328 <_printf_i>:
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	460c      	mov	r4, r1
 800432e:	7e27      	ldrb	r7, [r4, #24]
 8004330:	4691      	mov	r9, r2
 8004332:	2f78      	cmp	r7, #120	; 0x78
 8004334:	4680      	mov	r8, r0
 8004336:	469a      	mov	sl, r3
 8004338:	990c      	ldr	r1, [sp, #48]	; 0x30
 800433a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800433e:	d807      	bhi.n	8004350 <_printf_i+0x28>
 8004340:	2f62      	cmp	r7, #98	; 0x62
 8004342:	d80a      	bhi.n	800435a <_printf_i+0x32>
 8004344:	2f00      	cmp	r7, #0
 8004346:	f000 80d9 	beq.w	80044fc <_printf_i+0x1d4>
 800434a:	2f58      	cmp	r7, #88	; 0x58
 800434c:	f000 80a4 	beq.w	8004498 <_printf_i+0x170>
 8004350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004358:	e03a      	b.n	80043d0 <_printf_i+0xa8>
 800435a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800435e:	2b15      	cmp	r3, #21
 8004360:	d8f6      	bhi.n	8004350 <_printf_i+0x28>
 8004362:	a001      	add	r0, pc, #4	; (adr r0, 8004368 <_printf_i+0x40>)
 8004364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043d5 	.word	0x080043d5
 8004370:	08004351 	.word	0x08004351
 8004374:	08004351 	.word	0x08004351
 8004378:	08004351 	.word	0x08004351
 800437c:	08004351 	.word	0x08004351
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004351 	.word	0x08004351
 8004388:	08004351 	.word	0x08004351
 800438c:	08004351 	.word	0x08004351
 8004390:	08004351 	.word	0x08004351
 8004394:	080044e3 	.word	0x080044e3
 8004398:	08004405 	.word	0x08004405
 800439c:	080044c5 	.word	0x080044c5
 80043a0:	08004351 	.word	0x08004351
 80043a4:	08004351 	.word	0x08004351
 80043a8:	08004505 	.word	0x08004505
 80043ac:	08004351 	.word	0x08004351
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004351 	.word	0x08004351
 80043b8:	08004351 	.word	0x08004351
 80043bc:	080044cd 	.word	0x080044cd
 80043c0:	680b      	ldr	r3, [r1, #0]
 80043c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	600a      	str	r2, [r1, #0]
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a4      	b.n	800451e <_printf_i+0x1f6>
 80043d4:	6825      	ldr	r5, [r4, #0]
 80043d6:	6808      	ldr	r0, [r1, #0]
 80043d8:	062e      	lsls	r6, r5, #24
 80043da:	f100 0304 	add.w	r3, r0, #4
 80043de:	d50a      	bpl.n	80043f6 <_printf_i+0xce>
 80043e0:	6805      	ldr	r5, [r0, #0]
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	da03      	bge.n	80043f0 <_printf_i+0xc8>
 80043e8:	232d      	movs	r3, #45	; 0x2d
 80043ea:	426d      	negs	r5, r5
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	230a      	movs	r3, #10
 80043f2:	485e      	ldr	r0, [pc, #376]	; (800456c <_printf_i+0x244>)
 80043f4:	e019      	b.n	800442a <_printf_i+0x102>
 80043f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043fa:	6805      	ldr	r5, [r0, #0]
 80043fc:	600b      	str	r3, [r1, #0]
 80043fe:	bf18      	it	ne
 8004400:	b22d      	sxthne	r5, r5
 8004402:	e7ef      	b.n	80043e4 <_printf_i+0xbc>
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	6825      	ldr	r5, [r4, #0]
 8004408:	1d18      	adds	r0, r3, #4
 800440a:	6008      	str	r0, [r1, #0]
 800440c:	0628      	lsls	r0, r5, #24
 800440e:	d501      	bpl.n	8004414 <_printf_i+0xec>
 8004410:	681d      	ldr	r5, [r3, #0]
 8004412:	e002      	b.n	800441a <_printf_i+0xf2>
 8004414:	0669      	lsls	r1, r5, #25
 8004416:	d5fb      	bpl.n	8004410 <_printf_i+0xe8>
 8004418:	881d      	ldrh	r5, [r3, #0]
 800441a:	2f6f      	cmp	r7, #111	; 0x6f
 800441c:	bf0c      	ite	eq
 800441e:	2308      	moveq	r3, #8
 8004420:	230a      	movne	r3, #10
 8004422:	4852      	ldr	r0, [pc, #328]	; (800456c <_printf_i+0x244>)
 8004424:	2100      	movs	r1, #0
 8004426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800442a:	6866      	ldr	r6, [r4, #4]
 800442c:	2e00      	cmp	r6, #0
 800442e:	bfa8      	it	ge
 8004430:	6821      	ldrge	r1, [r4, #0]
 8004432:	60a6      	str	r6, [r4, #8]
 8004434:	bfa4      	itt	ge
 8004436:	f021 0104 	bicge.w	r1, r1, #4
 800443a:	6021      	strge	r1, [r4, #0]
 800443c:	b90d      	cbnz	r5, 8004442 <_printf_i+0x11a>
 800443e:	2e00      	cmp	r6, #0
 8004440:	d04d      	beq.n	80044de <_printf_i+0x1b6>
 8004442:	4616      	mov	r6, r2
 8004444:	fbb5 f1f3 	udiv	r1, r5, r3
 8004448:	fb03 5711 	mls	r7, r3, r1, r5
 800444c:	5dc7      	ldrb	r7, [r0, r7]
 800444e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004452:	462f      	mov	r7, r5
 8004454:	42bb      	cmp	r3, r7
 8004456:	460d      	mov	r5, r1
 8004458:	d9f4      	bls.n	8004444 <_printf_i+0x11c>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10b      	bne.n	8004476 <_printf_i+0x14e>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07df      	lsls	r7, r3, #31
 8004462:	d508      	bpl.n	8004476 <_printf_i+0x14e>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	6861      	ldr	r1, [r4, #4]
 8004468:	4299      	cmp	r1, r3
 800446a:	bfde      	ittt	le
 800446c:	2330      	movle	r3, #48	; 0x30
 800446e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004472:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004476:	1b92      	subs	r2, r2, r6
 8004478:	6122      	str	r2, [r4, #16]
 800447a:	464b      	mov	r3, r9
 800447c:	4621      	mov	r1, r4
 800447e:	4640      	mov	r0, r8
 8004480:	f8cd a000 	str.w	sl, [sp]
 8004484:	aa03      	add	r2, sp, #12
 8004486:	f7ff fedf 	bl	8004248 <_printf_common>
 800448a:	3001      	adds	r0, #1
 800448c:	d14c      	bne.n	8004528 <_printf_i+0x200>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	b004      	add	sp, #16
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	4834      	ldr	r0, [pc, #208]	; (800456c <_printf_i+0x244>)
 800449a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800449e:	680e      	ldr	r6, [r1, #0]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80044a6:	061f      	lsls	r7, r3, #24
 80044a8:	600e      	str	r6, [r1, #0]
 80044aa:	d514      	bpl.n	80044d6 <_printf_i+0x1ae>
 80044ac:	07d9      	lsls	r1, r3, #31
 80044ae:	bf44      	itt	mi
 80044b0:	f043 0320 	orrmi.w	r3, r3, #32
 80044b4:	6023      	strmi	r3, [r4, #0]
 80044b6:	b91d      	cbnz	r5, 80044c0 <_printf_i+0x198>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	2310      	movs	r3, #16
 80044c2:	e7af      	b.n	8004424 <_printf_i+0xfc>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2378      	movs	r3, #120	; 0x78
 80044ce:	4828      	ldr	r0, [pc, #160]	; (8004570 <_printf_i+0x248>)
 80044d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044d4:	e7e3      	b.n	800449e <_printf_i+0x176>
 80044d6:	065e      	lsls	r6, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2ad      	uxthmi	r5, r5
 80044dc:	e7e6      	b.n	80044ac <_printf_i+0x184>
 80044de:	4616      	mov	r6, r2
 80044e0:	e7bb      	b.n	800445a <_printf_i+0x132>
 80044e2:	680b      	ldr	r3, [r1, #0]
 80044e4:	6826      	ldr	r6, [r4, #0]
 80044e6:	1d1d      	adds	r5, r3, #4
 80044e8:	6960      	ldr	r0, [r4, #20]
 80044ea:	600d      	str	r5, [r1, #0]
 80044ec:	0635      	lsls	r5, r6, #24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	d501      	bpl.n	80044f6 <_printf_i+0x1ce>
 80044f2:	6018      	str	r0, [r3, #0]
 80044f4:	e002      	b.n	80044fc <_printf_i+0x1d4>
 80044f6:	0671      	lsls	r1, r6, #25
 80044f8:	d5fb      	bpl.n	80044f2 <_printf_i+0x1ca>
 80044fa:	8018      	strh	r0, [r3, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	4616      	mov	r6, r2
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	e7ba      	b.n	800447a <_printf_i+0x152>
 8004504:	680b      	ldr	r3, [r1, #0]
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	600a      	str	r2, [r1, #0]
 800450a:	681e      	ldr	r6, [r3, #0]
 800450c:	2100      	movs	r1, #0
 800450e:	4630      	mov	r0, r6
 8004510:	6862      	ldr	r2, [r4, #4]
 8004512:	f000 f82f 	bl	8004574 <memchr>
 8004516:	b108      	cbz	r0, 800451c <_printf_i+0x1f4>
 8004518:	1b80      	subs	r0, r0, r6
 800451a:	6060      	str	r0, [r4, #4]
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	2300      	movs	r3, #0
 8004522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004526:	e7a8      	b.n	800447a <_printf_i+0x152>
 8004528:	4632      	mov	r2, r6
 800452a:	4649      	mov	r1, r9
 800452c:	4640      	mov	r0, r8
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d0ab      	beq.n	800448e <_printf_i+0x166>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	079b      	lsls	r3, r3, #30
 800453a:	d413      	bmi.n	8004564 <_printf_i+0x23c>
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	4298      	cmp	r0, r3
 8004542:	bfb8      	it	lt
 8004544:	4618      	movlt	r0, r3
 8004546:	e7a4      	b.n	8004492 <_printf_i+0x16a>
 8004548:	2301      	movs	r3, #1
 800454a:	4632      	mov	r2, r6
 800454c:	4649      	mov	r1, r9
 800454e:	4640      	mov	r0, r8
 8004550:	47d0      	blx	sl
 8004552:	3001      	adds	r0, #1
 8004554:	d09b      	beq.n	800448e <_printf_i+0x166>
 8004556:	3501      	adds	r5, #1
 8004558:	68e3      	ldr	r3, [r4, #12]
 800455a:	9903      	ldr	r1, [sp, #12]
 800455c:	1a5b      	subs	r3, r3, r1
 800455e:	42ab      	cmp	r3, r5
 8004560:	dcf2      	bgt.n	8004548 <_printf_i+0x220>
 8004562:	e7eb      	b.n	800453c <_printf_i+0x214>
 8004564:	2500      	movs	r5, #0
 8004566:	f104 0619 	add.w	r6, r4, #25
 800456a:	e7f5      	b.n	8004558 <_printf_i+0x230>
 800456c:	0800482d 	.word	0x0800482d
 8004570:	0800483e 	.word	0x0800483e

08004574 <memchr>:
 8004574:	4603      	mov	r3, r0
 8004576:	b510      	push	{r4, lr}
 8004578:	b2c9      	uxtb	r1, r1
 800457a:	4402      	add	r2, r0
 800457c:	4293      	cmp	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	d101      	bne.n	8004586 <memchr+0x12>
 8004582:	2000      	movs	r0, #0
 8004584:	e003      	b.n	800458e <memchr+0x1a>
 8004586:	7804      	ldrb	r4, [r0, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	428c      	cmp	r4, r1
 800458c:	d1f6      	bne.n	800457c <memchr+0x8>
 800458e:	bd10      	pop	{r4, pc}

08004590 <memcpy>:
 8004590:	440a      	add	r2, r1
 8004592:	4291      	cmp	r1, r2
 8004594:	f100 33ff 	add.w	r3, r0, #4294967295
 8004598:	d100      	bne.n	800459c <memcpy+0xc>
 800459a:	4770      	bx	lr
 800459c:	b510      	push	{r4, lr}
 800459e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a2:	4291      	cmp	r1, r2
 80045a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a8:	d1f9      	bne.n	800459e <memcpy+0xe>
 80045aa:	bd10      	pop	{r4, pc}

080045ac <memmove>:
 80045ac:	4288      	cmp	r0, r1
 80045ae:	b510      	push	{r4, lr}
 80045b0:	eb01 0402 	add.w	r4, r1, r2
 80045b4:	d902      	bls.n	80045bc <memmove+0x10>
 80045b6:	4284      	cmp	r4, r0
 80045b8:	4623      	mov	r3, r4
 80045ba:	d807      	bhi.n	80045cc <memmove+0x20>
 80045bc:	1e43      	subs	r3, r0, #1
 80045be:	42a1      	cmp	r1, r4
 80045c0:	d008      	beq.n	80045d4 <memmove+0x28>
 80045c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ca:	e7f8      	b.n	80045be <memmove+0x12>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4402      	add	r2, r0
 80045d0:	428a      	cmp	r2, r1
 80045d2:	d100      	bne.n	80045d6 <memmove+0x2a>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045de:	e7f7      	b.n	80045d0 <memmove+0x24>

080045e0 <_free_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d043      	beq.n	8004670 <_free_r+0x90>
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f0c      	subs	r4, r1, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	18e4      	addlt	r4, r4, r3
 80045f4:	f000 f8d0 	bl	8004798 <__malloc_lock>
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <_free_r+0x94>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	4610      	mov	r0, r2
 80045fe:	b933      	cbnz	r3, 800460e <_free_r+0x2e>
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6014      	str	r4, [r2, #0]
 8004604:	4628      	mov	r0, r5
 8004606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460a:	f000 b8cb 	b.w	80047a4 <__malloc_unlock>
 800460e:	42a3      	cmp	r3, r4
 8004610:	d90a      	bls.n	8004628 <_free_r+0x48>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	1862      	adds	r2, r4, r1
 8004616:	4293      	cmp	r3, r2
 8004618:	bf01      	itttt	eq
 800461a:	681a      	ldreq	r2, [r3, #0]
 800461c:	685b      	ldreq	r3, [r3, #4]
 800461e:	1852      	addeq	r2, r2, r1
 8004620:	6022      	streq	r2, [r4, #0]
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6004      	str	r4, [r0, #0]
 8004626:	e7ed      	b.n	8004604 <_free_r+0x24>
 8004628:	461a      	mov	r2, r3
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	b10b      	cbz	r3, 8004632 <_free_r+0x52>
 800462e:	42a3      	cmp	r3, r4
 8004630:	d9fa      	bls.n	8004628 <_free_r+0x48>
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	1850      	adds	r0, r2, r1
 8004636:	42a0      	cmp	r0, r4
 8004638:	d10b      	bne.n	8004652 <_free_r+0x72>
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	4401      	add	r1, r0
 800463e:	1850      	adds	r0, r2, r1
 8004640:	4283      	cmp	r3, r0
 8004642:	6011      	str	r1, [r2, #0]
 8004644:	d1de      	bne.n	8004604 <_free_r+0x24>
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4401      	add	r1, r0
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	6053      	str	r3, [r2, #4]
 8004650:	e7d8      	b.n	8004604 <_free_r+0x24>
 8004652:	d902      	bls.n	800465a <_free_r+0x7a>
 8004654:	230c      	movs	r3, #12
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	e7d4      	b.n	8004604 <_free_r+0x24>
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1821      	adds	r1, r4, r0
 800465e:	428b      	cmp	r3, r1
 8004660:	bf01      	itttt	eq
 8004662:	6819      	ldreq	r1, [r3, #0]
 8004664:	685b      	ldreq	r3, [r3, #4]
 8004666:	1809      	addeq	r1, r1, r0
 8004668:	6021      	streq	r1, [r4, #0]
 800466a:	6063      	str	r3, [r4, #4]
 800466c:	6054      	str	r4, [r2, #4]
 800466e:	e7c9      	b.n	8004604 <_free_r+0x24>
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	20000100 	.word	0x20000100

08004678 <_malloc_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	1ccd      	adds	r5, r1, #3
 800467c:	f025 0503 	bic.w	r5, r5, #3
 8004680:	3508      	adds	r5, #8
 8004682:	2d0c      	cmp	r5, #12
 8004684:	bf38      	it	cc
 8004686:	250c      	movcc	r5, #12
 8004688:	2d00      	cmp	r5, #0
 800468a:	4606      	mov	r6, r0
 800468c:	db01      	blt.n	8004692 <_malloc_r+0x1a>
 800468e:	42a9      	cmp	r1, r5
 8004690:	d903      	bls.n	800469a <_malloc_r+0x22>
 8004692:	230c      	movs	r3, #12
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	2000      	movs	r0, #0
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469a:	f000 f87d 	bl	8004798 <__malloc_lock>
 800469e:	4921      	ldr	r1, [pc, #132]	; (8004724 <_malloc_r+0xac>)
 80046a0:	680a      	ldr	r2, [r1, #0]
 80046a2:	4614      	mov	r4, r2
 80046a4:	b99c      	cbnz	r4, 80046ce <_malloc_r+0x56>
 80046a6:	4f20      	ldr	r7, [pc, #128]	; (8004728 <_malloc_r+0xb0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b923      	cbnz	r3, 80046b6 <_malloc_r+0x3e>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f862 	bl	8004778 <_sbrk_r>
 80046b4:	6038      	str	r0, [r7, #0]
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f85d 	bl	8004778 <_sbrk_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	d123      	bne.n	800470a <_malloc_r+0x92>
 80046c2:	230c      	movs	r3, #12
 80046c4:	4630      	mov	r0, r6
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	f000 f86c 	bl	80047a4 <__malloc_unlock>
 80046cc:	e7e3      	b.n	8004696 <_malloc_r+0x1e>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	1b5b      	subs	r3, r3, r5
 80046d2:	d417      	bmi.n	8004704 <_malloc_r+0x8c>
 80046d4:	2b0b      	cmp	r3, #11
 80046d6:	d903      	bls.n	80046e0 <_malloc_r+0x68>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	441c      	add	r4, r3
 80046dc:	6025      	str	r5, [r4, #0]
 80046de:	e004      	b.n	80046ea <_malloc_r+0x72>
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	42a2      	cmp	r2, r4
 80046e4:	bf0c      	ite	eq
 80046e6:	600b      	streq	r3, [r1, #0]
 80046e8:	6053      	strne	r3, [r2, #4]
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f85a 	bl	80047a4 <__malloc_unlock>
 80046f0:	f104 000b 	add.w	r0, r4, #11
 80046f4:	1d23      	adds	r3, r4, #4
 80046f6:	f020 0007 	bic.w	r0, r0, #7
 80046fa:	1ac2      	subs	r2, r0, r3
 80046fc:	d0cc      	beq.n	8004698 <_malloc_r+0x20>
 80046fe:	1a1b      	subs	r3, r3, r0
 8004700:	50a3      	str	r3, [r4, r2]
 8004702:	e7c9      	b.n	8004698 <_malloc_r+0x20>
 8004704:	4622      	mov	r2, r4
 8004706:	6864      	ldr	r4, [r4, #4]
 8004708:	e7cc      	b.n	80046a4 <_malloc_r+0x2c>
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0e3      	beq.n	80046dc <_malloc_r+0x64>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4630      	mov	r0, r6
 8004718:	f000 f82e 	bl	8004778 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1dd      	bne.n	80046dc <_malloc_r+0x64>
 8004720:	e7cf      	b.n	80046c2 <_malloc_r+0x4a>
 8004722:	bf00      	nop
 8004724:	20000100 	.word	0x20000100
 8004728:	20000104 	.word	0x20000104

0800472c <_realloc_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	4607      	mov	r7, r0
 8004730:	4614      	mov	r4, r2
 8004732:	460e      	mov	r6, r1
 8004734:	b921      	cbnz	r1, 8004740 <_realloc_r+0x14>
 8004736:	4611      	mov	r1, r2
 8004738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800473c:	f7ff bf9c 	b.w	8004678 <_malloc_r>
 8004740:	b922      	cbnz	r2, 800474c <_realloc_r+0x20>
 8004742:	f7ff ff4d 	bl	80045e0 <_free_r>
 8004746:	4625      	mov	r5, r4
 8004748:	4628      	mov	r0, r5
 800474a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474c:	f000 f830 	bl	80047b0 <_malloc_usable_size_r>
 8004750:	42a0      	cmp	r0, r4
 8004752:	d20f      	bcs.n	8004774 <_realloc_r+0x48>
 8004754:	4621      	mov	r1, r4
 8004756:	4638      	mov	r0, r7
 8004758:	f7ff ff8e 	bl	8004678 <_malloc_r>
 800475c:	4605      	mov	r5, r0
 800475e:	2800      	cmp	r0, #0
 8004760:	d0f2      	beq.n	8004748 <_realloc_r+0x1c>
 8004762:	4631      	mov	r1, r6
 8004764:	4622      	mov	r2, r4
 8004766:	f7ff ff13 	bl	8004590 <memcpy>
 800476a:	4631      	mov	r1, r6
 800476c:	4638      	mov	r0, r7
 800476e:	f7ff ff37 	bl	80045e0 <_free_r>
 8004772:	e7e9      	b.n	8004748 <_realloc_r+0x1c>
 8004774:	4635      	mov	r5, r6
 8004776:	e7e7      	b.n	8004748 <_realloc_r+0x1c>

08004778 <_sbrk_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	2300      	movs	r3, #0
 800477c:	4d05      	ldr	r5, [pc, #20]	; (8004794 <_sbrk_r+0x1c>)
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc fe20 	bl	80013c8 <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_sbrk_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_sbrk_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	20000208 	.word	0x20000208

08004798 <__malloc_lock>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__malloc_lock+0x8>)
 800479a:	f000 b811 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	20000210 	.word	0x20000210

080047a4 <__malloc_unlock>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__malloc_unlock+0x8>)
 80047a6:	f000 b80c 	b.w	80047c2 <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	20000210 	.word	0x20000210

080047b0 <_malloc_usable_size_r>:
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f18      	subs	r0, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfbc      	itt	lt
 80047ba:	580b      	ldrlt	r3, [r1, r0]
 80047bc:	18c0      	addlt	r0, r0, r3
 80047be:	4770      	bx	lr

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
